{"ast":null,"code":"import _regenerator from \"D:/\\u4F5C\\u4E1A/markdown-editor/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"D:/\\u4F5C\\u4E1A/markdown-editor/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { marked } from 'marked';\nimport hljs from 'highlight.js';\nimport { saveAs } from 'file-saver';\nimport html2canvas from 'html2canvas';\nimport { jsPDF } from 'jspdf';\n\n// 组件\nimport EditorToolbar from './components/EditorToolbar.vue';\nimport FileMenu from './components/FileMenu.vue';\n\n// 工具函数\nimport { detectFormats, toggleMarkdownFormat, insertMarkdownLink, insertMarkdownImage, handleListFormat, handleMultilineFormat } from './lib/formatUtils';\nimport { saveLocalFile, loadLocalFile, readTextFile } from './lib/fileOperations';\nimport { generateHTMLExport, generatePDFExport } from './lib/exportUtils';\nexport default {\n  components: {\n    EditorToolbar: EditorToolbar,\n    FileMenu: FileMenu\n  },\n  data: function data() {\n    return {\n      markdownContent: '## 欢迎使用Markdown编辑器\\n\\n这是一个示例文档，您可以:\\n1. 输入Markdown内容\\n2. 选中文本后点击格式按钮\\n3. 使用菜单栏保存/导出文件\\n\\n**加粗文字** *斜体文字*\\n\\n```javascript\\nconsole.log(\"Hello World!\");\\n```',\n      previewContent: '',\n      theme: 'light',\n      isMenuOpen: false,\n      hasSelection: false,\n      currentFormats: {},\n      selection: {\n        start: 0,\n        end: 0,\n        text: ''\n      }\n    };\n  },\n  computed: {\n    editorStyles: function editorStyles() {\n      return {\n        color: this.theme === 'light' ? '#333' : '#e0e0e0',\n        backgroundColor: this.theme === 'light' ? '#fff' : '#1e1e1e'\n      };\n    }\n  },\n  created: function created() {\n    this.initMarked();\n  },\n  mounted: function mounted() {\n    var _this = this;\n    this.updatePreview();\n    // 确保编辑器获取焦点\n    this.$nextTick(function () {\n      _this.$refs.editor.focus();\n    });\n  },\n  methods: {\n    // 初始化Marked和Highlight.js\n    initMarked: function initMarked() {\n      marked.setOptions({\n        breaks: true,\n        highlight: function highlight(code, lang) {\n          var language = hljs.getLanguage(lang) ? lang : 'plaintext';\n          return hljs.highlight(code, {\n            language: language\n          }).value;\n        }\n      });\n\n      // 注册常用语言\n      hljs.registerLanguage('javascript', hljs.getLanguage('javascript'));\n      hljs.registerLanguage('python', hljs.getLanguage('python'));\n      hljs.registerLanguage('html', hljs.getLanguage('html'));\n      hljs.registerLanguage('css', hljs.getLanguage('css'));\n    },\n    // 更新选中状态\n    updateSelection: function updateSelection() {\n      var editor = this.$refs.editor;\n      if (!editor) return;\n      this.selection = {\n        start: editor.selectionStart,\n        end: editor.selectionEnd,\n        text: this.markdownContent.slice(editor.selectionStart, editor.selectionEnd)\n      };\n      this.hasSelection = this.selection.start !== this.selection.end;\n\n      // 检测当前格式\n      if (this.hasSelection && this.selection.text) {\n        this.currentFormats = detectFormats(this.selection.text);\n      } else {\n        this.currentFormats = {};\n      }\n    },\n    // 更新预览\n    updatePreview: function updatePreview() {\n      var _this2 = this;\n      this.previewContent = marked.parse(this.markdownContent);\n      this.$nextTick(function () {\n        _this2.highlightCodeBlocks();\n      });\n    },\n    // 高亮代码块\n    highlightCodeBlocks: function highlightCodeBlocks() {\n      document.querySelectorAll('.preview pre code').forEach(function (block) {\n        hljs.highlightBlock(block);\n      });\n    },\n    // 处理格式切换\n    handleFormat: function handleFormat(type) {\n      this.toggleFormat(type);\n    },\n    // 切换格式\n    toggleFormat: function toggleFormat(formatType) {\n      var _this3 = this;\n      var editor = this.$refs.editor;\n      if (!editor) return;\n\n      // 保存当前选区\n      var startPos = editor.selectionStart;\n      var endPos = editor.selectionEnd;\n      var result;\n      switch (formatType) {\n        case 'bold':\n          result = toggleMarkdownFormat(this.markdownContent, this.selection, '**', '**');\n          break;\n        case 'italic':\n          result = toggleMarkdownFormat(this.markdownContent, this.selection, '_', '_');\n          break;\n        case 'h1':\n          result = toggleMarkdownFormat(this.markdownContent, this.selection, '# ', '');\n          break;\n        case 'h2':\n          result = toggleMarkdownFormat(this.markdownContent, this.selection, '## ', '');\n          break;\n        case 'h3':\n          result = toggleMarkdownFormat(this.markdownContent, this.selection, '### ', '');\n          break;\n        case 'ul':\n        case 'ol':\n          result = handleListFormat(this.markdownContent, this.selection, formatType);\n          break;\n        case 'code':\n          result = handleMultilineFormat(this.markdownContent, this.selection, '```\\n', '\\n```');\n          break;\n        case 'quote':\n          result = handleMultilineFormat(this.markdownContent, this.selection, '> ');\n          break;\n        default:\n          return;\n      }\n      this.markdownContent = result.content;\n      this.$nextTick(function () {\n        editor.focus();\n        editor.setSelectionRange(result.newStart, result.newEnd);\n        _this3.updateSelection();\n      });\n    },\n    // 插入链接\n    insertLink: function insertLink() {\n      var _this4 = this;\n      var text = prompt('链接文字:', this.selection.text || '链接文字');\n      if (text === null) return;\n      var url = prompt('链接地址:', 'https://');\n      if (url === null) return;\n      var result = insertMarkdownLink(this.markdownContent, this.selection, text, url);\n      this.markdownContent = result.content;\n      this.$nextTick(function () {\n        _this4.$refs.editor.focus();\n        _this4.$refs.editor.setSelectionRange(result.newStart, result.newEnd);\n        _this4.updateSelection();\n      });\n    },\n    // 插入图片\n    insertImage: function insertImage() {\n      var _this5 = this;\n      var alt = prompt('图片描述:', this.selection.text || '图片描述');\n      if (alt === null) return;\n      var url = prompt('图片地址:', 'https://');\n      if (url === null) return;\n      var result = insertMarkdownImage(this.markdownContent, this.selection, alt, url);\n      this.markdownContent = result.content;\n      this.$nextTick(function () {\n        _this5.$refs.editor.focus();\n        _this5.$refs.editor.setSelectionRange(result.newStart, result.newEnd);\n        _this5.updateSelection();\n      });\n    },\n    // 清空内容\n    clearContent: function clearContent() {\n      var _this6 = this;\n      this.markdownContent = '';\n      this.updatePreview();\n      this.$nextTick(function () {\n        _this6.$refs.editor.focus();\n      });\n    },\n    // 保存文件\n    saveFile: function saveFile() {\n      var fileName = prompt('输入保存的文件名:', \"markdown_\".concat(new Date().toISOString().slice(0, 10)));\n      if (fileName) {\n        saveLocalFile(fileName, this.markdownContent);\n        this.$Message.success('保存成功!');\n      }\n    },\n    // 加载文件\n    loadFile: function loadFile() {\n      var fileName = prompt('输入要加载的文件名:');\n      if (fileName) {\n        var content = loadLocalFile(fileName);\n        if (content) {\n          this.markdownContent = content;\n          this.updatePreview();\n          this.$Message.success('加载成功!');\n        } else {\n          this.$Message.error('文件不存在!');\n        }\n      }\n    },\n    // 导出Markdown文件\n    exportFile: function exportFile() {\n      var fileName = prompt('输入文件名:', \"markdown_\".concat(new Date().toISOString().slice(0, 10))) || 'markdown_export';\n      var blob = new Blob([this.markdownContent], {\n        type: 'text/markdown;charset=utf-8'\n      });\n      saveAs(blob, \"\".concat(fileName, \".md\"));\n    },\n    // 导入文件\n    importFile: function importFile() {\n      var _this7 = this;\n      var input = document.createElement('input');\n      input.type = 'file';\n      input.accept = '.md,.markdown';\n      input.onchange = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(e) {\n          var file, _t;\n          return _regenerator().w(function (_context) {\n            while (1) switch (_context.p = _context.n) {\n              case 0:\n                file = e.target.files[0];\n                if (!file) {\n                  _context.n = 4;\n                  break;\n                }\n                _context.p = 1;\n                _context.n = 2;\n                return readTextFile(file);\n              case 2:\n                _this7.markdownContent = _context.v;\n                _this7.updatePreview();\n                _this7.$Message.success('导入成功!');\n                _context.n = 4;\n                break;\n              case 3:\n                _context.p = 3;\n                _t = _context.v;\n                _this7.$Message.error('导入失败!');\n                console.error(_t);\n              case 4:\n                return _context.a(2);\n            }\n          }, _callee, null, [[1, 3]]);\n        }));\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      input.click();\n    },\n    // 导出HTML\n    exportAsHTML: function exportAsHTML() {\n      var fileName = prompt('输入文件名:', \"markdown_\".concat(new Date().toISOString().slice(0, 10))) || 'markdown_export';\n      var html = generateHTMLExport(this.previewContent);\n      var blob = new Blob([html], {\n        type: 'text/html;charset=utf-8'\n      });\n      saveAs(blob, \"\".concat(fileName, \".html\"));\n    },\n    // 导出PDF\n    exportAsPDF: function exportAsPDF() {\n      var _this8 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n        var fileName, _t2;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.p = _context2.n) {\n            case 0:\n              fileName = prompt('输入文件名:', \"markdown_\".concat(new Date().toISOString().slice(0, 10))) || 'markdown_export';\n              _context2.p = 1;\n              _context2.n = 2;\n              return generatePDFExport(_this8.previewContent, fileName);\n            case 2:\n              _this8.$Message.success('导出PDF成功!');\n              _context2.n = 4;\n              break;\n            case 3:\n              _context2.p = 3;\n              _t2 = _context2.v;\n              _this8.$Message.error('导出PDF失败!');\n              console.error(_t2);\n            case 4:\n              return _context2.a(2);\n          }\n        }, _callee2, null, [[1, 3]]);\n      }))();\n    },\n    // 切换主题\n    changeTheme: function changeTheme(newTheme) {\n      this.theme = newTheme;\n      // 强制更新预览区域样式\n      this.$nextTick(function () {\n        var preview = document.querySelector('.preview');\n        if (preview) {\n          preview.style.backgroundColor = newTheme === 'dark' ? '#2d2d2d' : '#fff';\n          preview.style.color = newTheme === 'dark' ? '#e0e0e0' : '#333';\n        }\n      });\n    },\n    // 切换菜单\n    toggleMenu: function toggleMenu() {\n      this.isMenuOpen = !this.isMenuOpen;\n    }\n  }\n};","map":{"version":3,"names":["marked","hljs","saveAs","html2canvas","jsPDF","EditorToolbar","FileMenu","detectFormats","toggleMarkdownFormat","insertMarkdownLink","insertMarkdownImage","handleListFormat","handleMultilineFormat","saveLocalFile","loadLocalFile","readTextFile","generateHTMLExport","generatePDFExport","components","data","markdownContent","previewContent","theme","isMenuOpen","hasSelection","currentFormats","selection","start","end","text","computed","editorStyles","color","backgroundColor","created","initMarked","mounted","_this","updatePreview","$nextTick","$refs","editor","focus","methods","setOptions","breaks","highlight","code","lang","language","getLanguage","value","registerLanguage","updateSelection","selectionStart","selectionEnd","slice","_this2","parse","highlightCodeBlocks","document","querySelectorAll","forEach","block","highlightBlock","handleFormat","type","toggleFormat","formatType","_this3","startPos","endPos","result","content","setSelectionRange","newStart","newEnd","insertLink","_this4","prompt","url","insertImage","_this5","alt","clearContent","_this6","saveFile","fileName","concat","Date","toISOString","$Message","success","loadFile","error","exportFile","blob","Blob","importFile","_this7","input","createElement","accept","onchange","_ref","_asyncToGenerator","_regenerator","m","_callee","e","file","_t","w","_context","p","n","target","files","v","console","a","_x","apply","arguments","click","exportAsHTML","html","exportAsPDF","_this8","_callee2","_t2","_context2","changeTheme","newTheme","preview","querySelector","style","toggleMenu"],"sources":["src/App.vue"],"sourcesContent":["import FileMenu from './components/FileMenu.vue'\r\n\r\n<template>\n  <div :class=\"['app-container', theme]\">\n    <!-- 编辑器工具栏 -->\n    <editor-toolbar\n      ref=\"toolbar\"\n      :has-selection=\"hasSelection\"\n      :current-formats=\"currentFormats\"\n      @format=\"handleFormat\"\n      @insert-link=\"insertLink\"\n      @insert-image=\"insertImage\"\n      @clear=\"clearContent\"\n      @toggle-menu=\"toggleMenu\"\n    />\n\n    <!-- 可收缩菜单抽屉 -->\n    <i-drawer\n      title=\"菜单\"\n      :value=\"isMenuOpen\"\n      :width=\"280\"\n      :closable=\"true\"\n      @on-close=\"toggleMenu\"\n    >\n      <file-menu\n        @save=\"saveFile\"\n        @load=\"loadFile\"\n        @export-md=\"exportFile\"\n        @import=\"importFile\"\n        @export-html=\"exportAsHTML\"\n        @export-pdf=\"exportAsPDF\"\n        @change-theme=\"changeTheme\"\n        :current-theme=\"theme\"\n      />\n    </i-drawer>\n\n    <!-- 编辑器与预览区域 -->\n    <div class=\"editor-preview\">\n      <!-- 编辑器区域 -->\n      <div \n        class=\"editor\" \n        :style=\"{ backgroundColor: theme === 'light' ? '#fff' : '#1e1e1e' }\"\n      >\n        <textarea\n          ref=\"editor\"\n          v-model=\"markdownContent\"\n          :style=\"editorStyles\"\n          @input=\"updatePreview\"\n          @mouseup=\"updateSelection\"\n          @keyup=\"updateSelection\"\n          @select=\"updateSelection\"\n          @click=\"updateSelection\"\n          @keydown.ctrl.b.prevent=\"toggleFormat('bold')\"\n          @keydown.ctrl.i.prevent=\"toggleFormat('italic')\"\n          placeholder=\"输入Markdown内容...\"\n        ></textarea>\n      </div>\n\n      <!-- 预览区域 -->\n      <div \n        class=\"preview\" \n        :class=\"theme\"\n        v-html=\"previewContent\"\n      ></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { marked } from 'marked'\nimport hljs from 'highlight.js'\nimport { saveAs } from 'file-saver'\nimport html2canvas from 'html2canvas'\nimport { jsPDF } from 'jspdf'\n\n// 组件\nimport EditorToolbar from './components/EditorToolbar.vue'\nimport FileMenu from './components/FileMenu.vue'\n\n// 工具函数\nimport {\n  detectFormats,\n  toggleMarkdownFormat,\n  insertMarkdownLink,\n  insertMarkdownImage,\n  handleListFormat,\n  handleMultilineFormat\n} from './lib/formatUtils'\nimport {\n  saveLocalFile,\n  loadLocalFile,\n  readTextFile\n} from './lib/fileOperations'\nimport {\n  generateHTMLExport,\n  generatePDFExport\n} from './lib/exportUtils'\n\nexport default {\n  components: {\n    EditorToolbar,\n    FileMenu\n  },\n  data() {\n    return {\n      markdownContent: '## 欢迎使用Markdown编辑器\\n\\n这是一个示例文档，您可以:\\n1. 输入Markdown内容\\n2. 选中文本后点击格式按钮\\n3. 使用菜单栏保存/导出文件\\n\\n**加粗文字** *斜体文字*\\n\\n```javascript\\nconsole.log(\"Hello World!\");\\n```',\n      previewContent: '',\n      theme: 'light',\n      isMenuOpen: false,\n      hasSelection: false,\n      currentFormats: {},\n      selection: {\n        start: 0,\n        end: 0,\n        text: ''\n      }\n    }\n  },\n  computed: {\n    editorStyles() {\n      return {\n        color: this.theme === 'light' ? '#333' : '#e0e0e0',\n        backgroundColor: this.theme === 'light' ? '#fff' : '#1e1e1e'\n      }\n    }\n  },\n  created() {\n    this.initMarked()\n  },\n  mounted() {\n    this.updatePreview()\n    // 确保编辑器获取焦点\n    this.$nextTick(() => {\n      this.$refs.editor.focus()\n    })\n  },\n  methods: {\n    // 初始化Marked和Highlight.js\n    initMarked() {\n      marked.setOptions({\n        breaks: true,\n        highlight: (code, lang) => {\n          const language = hljs.getLanguage(lang) ? lang : 'plaintext'\n          return hljs.highlight(code, { language }).value\n        }\n      })\n\n      // 注册常用语言\n      hljs.registerLanguage('javascript', hljs.getLanguage('javascript'))\n      hljs.registerLanguage('python', hljs.getLanguage('python'))\n      hljs.registerLanguage('html', hljs.getLanguage('html'))\n      hljs.registerLanguage('css', hljs.getLanguage('css'))\n    },\n\n    // 更新选中状态\n    updateSelection() {\n      const editor = this.$refs.editor\n      if (!editor) return\n  \n      this.selection = {\n        start: editor.selectionStart,\n        end: editor.selectionEnd,\n        text: this.markdownContent.slice(editor.selectionStart, editor.selectionEnd)\n      }\n      this.hasSelection = this.selection.start !== this.selection.end\n      \n      // 检测当前格式\n      if (this.hasSelection && this.selection.text) {\n        this.currentFormats = detectFormats(this.selection.text)\n      } else {\n        this.currentFormats = {}\n      }\n    },\n\n    // 更新预览\n    updatePreview() {\n      this.previewContent = marked.parse(this.markdownContent)\n      this.$nextTick(() => {\n        this.highlightCodeBlocks()\n      })\n    },\n\n    // 高亮代码块\n    highlightCodeBlocks() {\n      document.querySelectorAll('.preview pre code').forEach(block => {\n        hljs.highlightBlock(block)\n      })\n    },\n\n    // 处理格式切换\n    handleFormat(type) {\n      this.toggleFormat(type)\n    },\n\n    // 切换格式\n    toggleFormat(formatType) {\n      const editor = this.$refs.editor\n      if (!editor) return\n\n      // 保存当前选区\n      const startPos = editor.selectionStart\n      const endPos = editor.selectionEnd\n\n      let result\n      switch (formatType) {\n        case 'bold':\n          result = toggleMarkdownFormat(this.markdownContent, this.selection, '**', '**')\n          break\n        case 'italic':\n          result = toggleMarkdownFormat(this.markdownContent, this.selection, '_', '_')\n          break\n        case 'h1':\n          result = toggleMarkdownFormat(this.markdownContent, this.selection, '# ', '')\n          break\n        case 'h2':\n          result = toggleMarkdownFormat(this.markdownContent, this.selection, '## ', '')\n          break\n        case 'h3':\n          result = toggleMarkdownFormat(this.markdownContent, this.selection, '### ', '')\n          break\n        case 'ul':\n        case 'ol':\n          result = handleListFormat(this.markdownContent, this.selection, formatType)\n          break\n        case 'code':\n          result = handleMultilineFormat(this.markdownContent, this.selection, '```\\n', '\\n```')\n          break\n        case 'quote':\n          result = handleMultilineFormat(this.markdownContent, this.selection, '> ')\n          break\n        default:\n          return\n      }\n\n      this.markdownContent = result.content\n      this.$nextTick(() => {\n        editor.focus()\n        editor.setSelectionRange(result.newStart, result.newEnd)\n        this.updateSelection()\n      })\n    },\n\n    // 插入链接\n    insertLink() {\n      const text = prompt('链接文字:', this.selection.text || '链接文字')\n      if (text === null) return\n      \n      const url = prompt('链接地址:', 'https://')\n      if (url === null) return\n      \n      const result = insertMarkdownLink(\n        this.markdownContent,\n        this.selection,\n        text,\n        url\n      )\n\n      this.markdownContent = result.content\n      this.$nextTick(() => {\n        this.$refs.editor.focus()\n        this.$refs.editor.setSelectionRange(result.newStart, result.newEnd)\n        this.updateSelection()\n      })\n    },\n\n    // 插入图片\n    insertImage() {\n      const alt = prompt('图片描述:', this.selection.text || '图片描述')\n      if (alt === null) return\n      \n      const url = prompt('图片地址:', 'https://')\n      if (url === null) return\n      \n      const result = insertMarkdownImage(\n        this.markdownContent,\n        this.selection,\n        alt,\n        url\n      )\n\n      this.markdownContent = result.content\n      this.$nextTick(() => {\n        this.$refs.editor.focus()\n        this.$refs.editor.setSelectionRange(result.newStart, result.newEnd)\n        this.updateSelection()\n      })\n    },\n\n    // 清空内容\n    clearContent() {\n      this.markdownContent = ''\n      this.updatePreview()\n      this.$nextTick(() => {\n        this.$refs.editor.focus()\n      })\n    },\n\n    // 保存文件\n    saveFile() {\n      const fileName = prompt('输入保存的文件名:', `markdown_${new Date().toISOString().slice(0, 10)}`)\n      if (fileName) {\n        saveLocalFile(fileName, this.markdownContent)\n        this.$Message.success('保存成功!')\n      }\n    },\n\n    // 加载文件\n    loadFile() {\n      const fileName = prompt('输入要加载的文件名:')\n      if (fileName) {\n        const content = loadLocalFile(fileName)\n        if (content) {\n          this.markdownContent = content\n          this.updatePreview()\n          this.$Message.success('加载成功!')\n        } else {\n          this.$Message.error('文件不存在!')\n        }\n      }\n    },\n\n    // 导出Markdown文件\n    exportFile() {\n      const fileName = prompt('输入文件名:', `markdown_${new Date().toISOString().slice(0, 10)}`) || 'markdown_export'\n      const blob = new Blob([this.markdownContent], { type: 'text/markdown;charset=utf-8' })\n      saveAs(blob, `${fileName}.md`)\n    },\n\n    // 导入文件\n    importFile() {\n      const input = document.createElement('input')\n      input.type = 'file'\n      input.accept = '.md,.markdown'\n      input.onchange = async (e) => {\n        const file = e.target.files[0]\n        if (file) {\n          try {\n            this.markdownContent = await readTextFile(file)\n            this.updatePreview()\n            this.$Message.success('导入成功!')\n          } catch (error) {\n            this.$Message.error('导入失败!')\n            console.error(error)\n          }\n        }\n      }\n      input.click()\n    },\n\n    // 导出HTML\n    exportAsHTML() {\n      const fileName = prompt('输入文件名:', `markdown_${new Date().toISOString().slice(0, 10)}`) || 'markdown_export'\n      const html = generateHTMLExport(this.previewContent)\n      const blob = new Blob([html], { type: 'text/html;charset=utf-8' })\n      saveAs(blob, `${fileName}.html`)\n    },\n\n    // 导出PDF\n    async exportAsPDF() {\n      const fileName = prompt('输入文件名:', `markdown_${new Date().toISOString().slice(0, 10)}`) || 'markdown_export'\n      try {\n        await generatePDFExport(this.previewContent, fileName)\n        this.$Message.success('导出PDF成功!')\n      } catch (error) {\n        this.$Message.error('导出PDF失败!')\n        console.error(error)\n      }\n    },\n\n    // 切换主题\n    changeTheme(newTheme) {\n      this.theme = newTheme\n      // 强制更新预览区域样式\n      this.$nextTick(() => {\n        const preview = document.querySelector('.preview')\n        if (preview) {\n          preview.style.backgroundColor = newTheme === 'dark' ? '#2d2d2d' : '#fff'\n          preview.style.color = newTheme === 'dark' ? '#e0e0e0' : '#333'\n        }\n      })\n    },\n\n    // 切换菜单\n    toggleMenu() {\n      this.isMenuOpen = !this.isMenuOpen\n    }\n  }\n}\n</script>\n\n<style scoped>\n.app-container {\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.app-container.light {\n  background-color: #f5f5f5;\n}\n\n.app-container.dark {\n  background-color: #1e1e1e;\n}\n\n.editor-preview {\n  display: flex;\n  flex: 1;\n  overflow: hidden;\n}\n\n.editor {\n  flex: 1;\n  padding: 20px;\n  overflow: auto;\n}\n\n.editor textarea {\n  width: 100%;\n  height: 100%;\n  border: none;\n  resize: none;\n  outline: none;\n  font-family: 'Consolas', monospace;\n  font-size: 14px;\n  line-height: 1.6;\n}\n\n.preview {\n  flex: 1;\n  padding: 20px;\n  overflow: auto;\n  border-left: 1px solid #e8eaec;\n}\n\n.preview.light {\n  background-color: #fff;\n  color: #333;\n}\n\n.preview.dark {\n  background-color: #2d2d2d;\n  color: #e0e0e0;\n}\n\n/* 响应式布局 */\n@media (max-width: 768px) {\n  .editor-preview {\n    flex-direction: column;\n  }\n  \n  .preview {\n    border-left: none;\n    border-top: 1px solid #e8eaec;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}