{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\n/**\n * Markdown 格式工具集\n * 提供文本格式检测、添加/移除格式等功能\n */\n\n/**\n * 检测文本中应用的Markdown格式\n * @param {string} text 要检测的文本\n * @returns {Object} 格式状态对象\n */\nexport function detectFormats(text) {\n  if (!text || typeof text !== 'string') return {};\n  return {\n    bold: isWrappedWith(text, '**'),\n    italic: isWrappedWith(text, '_') || isWrappedWith(text, '*'),\n    h1: text.startsWith('# '),\n    h2: text.startsWith('## '),\n    h3: text.startsWith('### '),\n    ul: text.startsWith('- ') || text.startsWith('* '),\n    ol: /^\\d+\\. /.test(text),\n    code: isWrappedWith(text, '```\\n', '\\n```') || isWrappedWith(text, '`'),\n    quote: text.startsWith('> ')\n  };\n}\n\n/**\n * 检查文本是否被指定字符包裹\n * @param {string} text 要检查的文本\n * @param {string} prefix 前缀\n * @param {string} [suffix] 后缀（默认同前缀）\n * @returns {boolean}\n */\nfunction isWrappedWith(text, prefix) {\n  var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : prefix;\n  return text.startsWith(prefix) && text.endsWith(suffix);\n}\n\n/**\n * 切换Markdown格式（添加/移除）\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function toggleMarkdownFormat(content, selection, prefix, suffix) {\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n\n  // 检查是否已应用格式\n  var isFormatted = isWrappedWith(text, prefix, suffix);\n  if (isFormatted) {\n    return removeMarkdownFormat(content, selection, prefix, suffix);\n  } else {\n    return addMarkdownFormat(content, selection, prefix, suffix);\n  }\n}\n\n/**\n * 添加Markdown格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function addMarkdownFormat(content, selection, prefix, suffix) {\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n  return {\n    content: content.slice(0, start) + prefix + text + suffix + content.slice(end),\n    newStart: start + prefix.length,\n    newEnd: end + prefix.length\n  };\n}\n\n/**\n * 移除Markdown格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function removeMarkdownFormat(content, selection, prefix, suffix) {\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n  return {\n    content: content.slice(0, start) + text.slice(prefix.length, -suffix.length) + content.slice(end),\n    newStart: start,\n    newEnd: end - prefix.length - suffix.length\n  };\n}\n\n/**\n * 插入Markdown链接\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} linkText 链接文字\n * @param {string} url 链接地址\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function insertMarkdownLink(content, selection, linkText, url) {\n  var start = selection.start,\n    end = selection.end;\n  var markdownLink = \"[\".concat(linkText, \"](\").concat(url, \")\");\n  return {\n    content: content.slice(0, start) + markdownLink + content.slice(end),\n    newStart: start + markdownLink.length,\n    newEnd: start + markdownLink.length\n  };\n}\n\n/**\n * 插入Markdown图片\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} altText 替代文字\n * @param {string} url 图片地址\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function insertMarkdownImage(content, selection, altText, url) {\n  var start = selection.start,\n    end = selection.end;\n  var markdownImage = \"![\".concat(altText, \"](\").concat(url, \")\");\n  return {\n    content: content.slice(0, start) + markdownImage + content.slice(end),\n    newStart: start + markdownImage.length,\n    newEnd: start + markdownImage.length\n  };\n}\n\n/**\n * 智能处理列表格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} type 列表类型 ('ul' 或 'ol')\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\n// 更新handleListFormat方法\nexport function handleListFormat(content, selection) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'ul';\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n  var lines = text.split('\\n');\n\n  // 检查是否已经是列表\n  var isAlreadyList = lines.every(function (line) {\n    return type === 'ul' ? line.startsWith('- ') || line.startsWith('* ') : /^\\d+\\. /.test(line);\n  });\n  if (isAlreadyList) {\n    // 移除列表格式\n    var newLines = lines.map(function (line) {\n      return type === 'ul' ? line.replace(/^[-*] /, '') : line.replace(/^\\d+\\. /, '');\n    });\n    var newText = newLines.join('\\n');\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    };\n  } else {\n    // 添加列表格式\n    var _newLines = lines.map(function (line, i) {\n      return type === 'ul' ? \"- \".concat(line) : \"\".concat(i + 1, \". \").concat(line);\n    });\n    var _newText = _newLines.join('\\n');\n    var lengthDiff = _newText.length - text.length;\n    return {\n      content: content.slice(0, start) + _newText + content.slice(end),\n      newStart: start,\n      newEnd: end + lengthDiff\n    };\n  }\n}\n\n/**\n * 处理多行格式（如代码块、引用）\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 每行前缀\n * @param {string} [suffix] 每行后缀（可选）\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function handleMultilineFormat(content, selection, prefix) {\n  var suffix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n  var lines = text.split('\\n');\n\n  // 检查是否已经应用格式\n  var isFormatted = lines.every(function (line) {\n    return line.startsWith(prefix) && (suffix ? line.endsWith(suffix) : true);\n  });\n  if (isFormatted) {\n    // 移除格式\n    var newLines = lines.map(function (line) {\n      return suffix ? line.slice(prefix.length, -suffix.length) : line.slice(prefix.length);\n    });\n    var newText = newLines.join('\\n');\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    };\n  } else {\n    // 添加格式\n    var _newLines2 = lines.map(function (line) {\n      return prefix + line + suffix;\n    });\n    var _newText2 = _newLines2.join('\\n');\n    var lengthDiff = _newText2.length - text.length;\n    return {\n      content: content.slice(0, start) + _newText2 + content.slice(end),\n      newStart: start,\n      newEnd: end + lengthDiff\n    };\n  }\n}\n\n// 常用格式的快捷方法\nexport var formatHelpers = {\n  bold: function bold(content, selection) {\n    return toggleMarkdownFormat(content, selection, '**', '**');\n  },\n  italic: function italic(content, selection) {\n    return toggleMarkdownFormat(content, selection, '_', '_');\n  },\n  h1: function h1(content, selection) {\n    return toggleMarkdownFormat(content, selection, '# ', '');\n  },\n  h2: function h2(content, selection) {\n    return toggleMarkdownFormat(content, selection, '## ', '');\n  },\n  h3: function h3(content, selection) {\n    return toggleMarkdownFormat(content, selection, '### ', '');\n  },\n  ul: function ul(content, selection) {\n    return handleListFormat(content, selection, 'ul');\n  },\n  ol: function ol(content, selection) {\n    return handleListFormat(content, selection, 'ol');\n  },\n  code: function code(content, selection) {\n    return handleMultilineFormat(content, selection, '```\\n', '\\n```');\n  },\n  quote: function quote(content, selection) {\n    return handleMultilineFormat(content, selection, '> ');\n  }\n};","map":{"version":3,"names":["detectFormats","text","bold","isWrappedWith","italic","h1","startsWith","h2","h3","ul","ol","test","code","quote","prefix","suffix","arguments","length","undefined","endsWith","toggleMarkdownFormat","content","selection","start","end","isFormatted","removeMarkdownFormat","addMarkdownFormat","slice","newStart","newEnd","insertMarkdownLink","linkText","url","markdownLink","concat","insertMarkdownImage","altText","markdownImage","handleListFormat","type","lines","split","isAlreadyList","every","line","newLines","map","replace","newText","join","i","lengthDiff","handleMultilineFormat","formatHelpers"],"sources":["D:/作业/markdown-editor/src/lib/formatUtils.js"],"sourcesContent":["/**\n * Markdown 格式工具集\n * 提供文本格式检测、添加/移除格式等功能\n */\n\n/**\n * 检测文本中应用的Markdown格式\n * @param {string} text 要检测的文本\n * @returns {Object} 格式状态对象\n */\nexport function detectFormats(text) {\n  if (!text || typeof text !== 'string') return {}\n  \n  return {\n    bold: isWrappedWith(text, '**'),\n    italic: isWrappedWith(text, '_') || isWrappedWith(text, '*'),\n    h1: text.startsWith('# '),\n    h2: text.startsWith('## '),\n    h3: text.startsWith('### '),\n    ul: text.startsWith('- ') || text.startsWith('* '),\n    ol: /^\\d+\\. /.test(text),\n    code: isWrappedWith(text, '```\\n', '\\n```') || isWrappedWith(text, '`'),\n    quote: text.startsWith('> ')\n  }\n}\n\n/**\n * 检查文本是否被指定字符包裹\n * @param {string} text 要检查的文本\n * @param {string} prefix 前缀\n * @param {string} [suffix] 后缀（默认同前缀）\n * @returns {boolean}\n */\nfunction isWrappedWith(text, prefix, suffix = prefix) {\n  return text.startsWith(prefix) && text.endsWith(suffix)\n}\n\n/**\n * 切换Markdown格式（添加/移除）\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function toggleMarkdownFormat(content, selection, prefix, suffix) {\n  const { start, end, text } = selection\n  \n  // 检查是否已应用格式\n  const isFormatted = isWrappedWith(text, prefix, suffix)\n  \n  if (isFormatted) {\n    return removeMarkdownFormat(content, selection, prefix, suffix)\n  } else {\n    return addMarkdownFormat(content, selection, prefix, suffix)\n  }\n}\n\n/**\n * 添加Markdown格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function addMarkdownFormat(content, selection, prefix, suffix) {\n  const { start, end, text } = selection\n  \n  return {\n    content: content.slice(0, start) + \n             prefix + text + suffix + \n             content.slice(end),\n    newStart: start + prefix.length,\n    newEnd: end + prefix.length\n  }\n}\n\n/**\n * 移除Markdown格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function removeMarkdownFormat(content, selection, prefix, suffix) {\n  const { start, end, text } = selection\n  \n  return {\n    content: content.slice(0, start) + \n             text.slice(prefix.length, -suffix.length) + \n             content.slice(end),\n    newStart: start,\n    newEnd: end - prefix.length - suffix.length\n  }\n}\n\n/**\n * 插入Markdown链接\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} linkText 链接文字\n * @param {string} url 链接地址\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function insertMarkdownLink(content, selection, linkText, url) {\n  const { start, end } = selection\n  const markdownLink = `[${linkText}](${url})`\n  \n  return {\n    content: content.slice(0, start) + \n             markdownLink + \n             content.slice(end),\n    newStart: start + markdownLink.length,\n    newEnd: start + markdownLink.length\n  }\n}\n\n/**\n * 插入Markdown图片\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} altText 替代文字\n * @param {string} url 图片地址\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function insertMarkdownImage(content, selection, altText, url) {\n  const { start, end } = selection\n  const markdownImage = `![${altText}](${url})`\n  \n  return {\n    content: content.slice(0, start) + \n             markdownImage + \n             content.slice(end),\n    newStart: start + markdownImage.length,\n    newEnd: start + markdownImage.length\n  }\n}\n\n/**\n * 智能处理列表格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} type 列表类型 ('ul' 或 'ol')\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\n// 更新handleListFormat方法\nexport function handleListFormat(content, selection, type = 'ul') {\n  const { start, end, text } = selection;\n  const lines = text.split('\\n');\n\n  // 检查是否已经是列表\n  const isAlreadyList = lines.every(line => \n    type === 'ul' \n      ? line.startsWith('- ') || line.startsWith('* ')\n      : /^\\d+\\. /.test(line)\n  );\n\n  if (isAlreadyList) {\n    // 移除列表格式\n    const newLines = lines.map(line => \n      type === 'ul' \n        ? line.replace(/^[-*] /, '') \n        : line.replace(/^\\d+\\. /, '')\n    );\n    const newText = newLines.join('\\n');\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    };\n  } else {\n    // 添加列表格式\n    const newLines = lines.map((line, i) => \n      type === 'ul' \n        ? `- ${line}` \n        : `${i + 1}. ${line}`\n    );\n    const newText = newLines.join('\\n');\n    const lengthDiff = newText.length - text.length;\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: end + lengthDiff\n    };\n  }\n}\n\n\n\n/**\n * 处理多行格式（如代码块、引用）\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 每行前缀\n * @param {string} [suffix] 每行后缀（可选）\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function handleMultilineFormat(content, selection, prefix, suffix = '') {\n  const { start, end, text } = selection\n  const lines = text.split('\\n')\n  \n  // 检查是否已经应用格式\n  const isFormatted = lines.every(line => \n    line.startsWith(prefix) && (suffix ? line.endsWith(suffix) : true)\n  )\n  \n  if (isFormatted) {\n    // 移除格式\n    const newLines = lines.map(line => \n      suffix \n        ? line.slice(prefix.length, -suffix.length)\n        : line.slice(prefix.length)\n    )\n    const newText = newLines.join('\\n')\n    \n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    }\n  } else {\n    // 添加格式\n    const newLines = lines.map(line => prefix + line + suffix)\n    const newText = newLines.join('\\n')\n    const lengthDiff = newText.length - text.length\n    \n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: end + lengthDiff\n    }\n  }\n}\n\n// 常用格式的快捷方法\nexport const formatHelpers = {\n  bold: (content, selection) => \n    toggleMarkdownFormat(content, selection, '**', '**'),\n  \n  italic: (content, selection) => \n    toggleMarkdownFormat(content, selection, '_', '_'),\n  \n  h1: (content, selection) => \n    toggleMarkdownFormat(content, selection, '# ', ''),\n  \n  h2: (content, selection) => \n    toggleMarkdownFormat(content, selection, '## ', ''),\n  \n  h3: (content, selection) => \n    toggleMarkdownFormat(content, selection, '### ', ''),\n  \n  ul: (content, selection) => \n    handleListFormat(content, selection, 'ul'),\n  \n  ol: (content, selection) => \n    handleListFormat(content, selection, 'ol'),\n  \n  code: (content, selection) => \n    handleMultilineFormat(content, selection, '```\\n', '\\n```'),\n  \n  quote: (content, selection) => \n    handleMultilineFormat(content, selection, '> ')\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}