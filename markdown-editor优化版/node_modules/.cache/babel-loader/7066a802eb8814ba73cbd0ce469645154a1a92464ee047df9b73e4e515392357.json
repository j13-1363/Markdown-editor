{"ast":null,"code":"import _regenerator from \"D:/\\u4F5C\\u4E1A/markdown-editor\\u4F18\\u5316\\u7248/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"D:/\\u4F5C\\u4E1A/markdown-editor\\u4F18\\u5316\\u7248/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url.to-json.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { marked } from 'marked';\nimport hljs from 'highlight.js';\nimport { exportAsHTML as _exportAsHTML, exportAsPDF as _exportAsPDF } from './lib/exportUtils.js';\nimport { formatHelpers } from './lib/formatUtils.js';\nexport default {\n  data: function data() {\n    return {\n      markdownContent: '',\n      previewContent: '',\n      theme: 'light',\n      fontFamily: \"'Courier New', monospace\",\n      fontSize: '14px',\n      hasSelection: false,\n      showFileMenu: false,\n      toolbarButtons: [{\n        name: '加粗',\n        action: 'bold',\n        requiresSelection: true\n      }, {\n        name: '斜体',\n        action: 'italic',\n        requiresSelection: true\n      }, {\n        name: '删除线',\n        action: 'strikethrough',\n        requiresSelection: true\n      }, {\n        name: 'H1',\n        action: 'h1',\n        requiresSelection: true\n      }, {\n        name: 'H2',\n        action: 'h2',\n        requiresSelection: true\n      }, {\n        name: 'H3',\n        action: 'h3',\n        requiresSelection: true\n      }, {\n        name: '无序列表',\n        action: 'ul',\n        requiresSelection: true\n      }, {\n        name: '有序列表',\n        action: 'ol',\n        requiresSelection: true\n      }, {\n        name: '任务列表',\n        action: 'taskList',\n        requiresSelection: true\n      }, {\n        name: '引用',\n        action: 'quote',\n        requiresSelection: true\n      }, {\n        name: '行内代码',\n        action: 'code',\n        requiresSelection: true\n      }, {\n        name: '代码块',\n        action: 'codeblock',\n        requiresSelection: true\n      }, {\n        name: '表格',\n        action: 'table',\n        requiresSelection: true\n      }, {\n        name: '插入图片',\n        action: 'image',\n        requiresSelection: false\n      }, {\n        name: '插入链接',\n        action: 'link',\n        requiresSelection: false\n      }]\n    };\n  },\n  mounted: function mounted() {\n    marked.setOptions({\n      highlight: function highlight(code) {\n        return hljs.highlightAuto(code).value;\n      }\n    });\n    this.updatePreview();\n    document.addEventListener('click', this.closeFileMenu);\n  },\n  beforeDestroy: function beforeDestroy() {\n    document.removeEventListener('click', this.closeFileMenu);\n  },\n  methods: {\n    handleFormat: function handleFormat(type) {\n      var _this = this;\n      var selection = this.getSelectionRange();\n      if (!selection.text && type !== 'image' && type !== 'link') return;\n      var content = this.getMarkdownContent();\n      if (type === 'image') {\n        this.handleImageSelect();\n        return;\n      }\n      if (type === 'link') {\n        this.insertLink(selection);\n        return;\n      }\n      var result = formatHelpers[type](content, selection);\n      this.setMarkdownContent(result.content);\n      this.$nextTick(function () {\n        _this.restoreSelection(result.newStart, result.newEnd);\n        _this.updatePreview();\n      });\n    },\n    getSelectionRange: function getSelectionRange() {\n      var selection = window.getSelection();\n      if (!selection.rangeCount) return {\n        start: 0,\n        end: 0,\n        text: ''\n      };\n      var editor = this.$refs.editor;\n      var range = selection.getRangeAt(0);\n\n      // 计算相对于编辑器内容的绝对位置\n      var preRange = document.createRange();\n      preRange.selectNodeContents(editor);\n      preRange.setEnd(range.startContainer, range.startOffset);\n      var start = preRange.toString().length;\n      preRange.setEnd(range.endContainer, range.endOffset);\n      var end = preRange.toString().length;\n      return {\n        start: start,\n        end: end,\n        text: range.toString()\n      };\n    },\n    restoreSelection: function restoreSelection(start, end) {\n      var editor = this.$refs.editor;\n      var range = document.createRange();\n      var textNode = editor.firstChild || editor;\n      var charCount = 0;\n      var startNode, startOffset, endNode, endOffset;\n      var _findPosition = function findPosition(node) {\n        if (node.nodeType === Node.TEXT_NODE) {\n          var nextCharCount = charCount + node.length;\n          if (!startNode && start >= charCount && start <= nextCharCount) {\n            startNode = node;\n            startOffset = start - charCount;\n          }\n          if (!endNode && end >= charCount && end <= nextCharCount) {\n            endNode = node;\n            endOffset = end - charCount;\n          }\n          charCount = nextCharCount;\n        } else if (node.nodeType === Node.ELEMENT_NODE && node.childNodes) {\n          Array.from(node.childNodes).forEach(_findPosition);\n        }\n      };\n      _findPosition(textNode);\n      if (!startNode) startNode = textNode, startOffset = 0;\n      if (!endNode) endNode = textNode, endOffset = 0;\n      range.setStart(startNode, startOffset);\n      range.setEnd(endNode, endOffset);\n      var sel = window.getSelection();\n      sel.removeAllRanges();\n      sel.addRange(range);\n    },\n    getMarkdownContent: function getMarkdownContent() {\n      var editor = this.$refs.editor;\n      var markdown = '';\n      var _walk = function walk(node) {\n        if (node.nodeType === Node.TEXT_NODE) {\n          markdown += node.textContent;\n        } else if (node.nodeType === Node.ELEMENT_NODE) {\n          if (node.tagName === 'IMG') {\n            markdown += \"![\\u56FE\\u7247](\".concat(node.src, \")\");\n          } else if (node.tagName === 'BR') {\n            markdown += '\\n';\n          } else {\n            Array.from(node.childNodes).forEach(_walk);\n          }\n        }\n      };\n      _walk(editor);\n      return markdown;\n    },\n    setMarkdownContent: function setMarkdownContent(content) {\n      var _this2 = this;\n      // 保存当前选区\n      var selection = window.getSelection();\n      var hadSelection = selection.rangeCount > 0;\n      var savedRange = null;\n      if (hadSelection) {\n        savedRange = selection.getRangeAt(0).cloneRange();\n      }\n\n      // 更新内容\n      this.$refs.editor.innerHTML = '';\n      this.$refs.editor.textContent = content;\n\n      // 恢复选区\n      if (hadSelection && savedRange) {\n        this.$nextTick(function () {\n          var newRange = document.createRange();\n          newRange.setStart(_this2.$refs.editor.firstChild, savedRange.startOffset);\n          newRange.setEnd(_this2.$refs.editor.firstChild, savedRange.endOffset);\n          var sel = window.getSelection();\n          sel.removeAllRanges();\n          sel.addRange(newRange);\n        });\n      }\n      this.updatePreview();\n      reader.readAsDataURL(file);\n    },\n    insertLink: function insertLink(selection) {\n      var linkText = prompt('输入链接文本:', selection.text) || selection.text;\n      var url = prompt('输入链接地址:');\n      if (!url) return;\n      if (selection.text.includes('![图片]')) {\n        alert('图片区域无法插入链接');\n        return;\n      }\n      var markdownLink = \"[\".concat(linkText, \"](\").concat(url, \")\");\n      var content = this.getMarkdownContent();\n      var newContent = content.slice(0, selection.start) + markdownLink + content.slice(selection.end);\n      this.setMarkdownContent(newContent);\n      this.updatePreview();\n    },\n    toggleFileMenu: function toggleFileMenu() {\n      this.showFileMenu = !this.showFileMenu;\n    },\n    closeFileMenu: function closeFileMenu(event) {\n      if (this.$refs.fileMenu && !this.$refs.fileMenu.contains(event.target)) {\n        this.showFileMenu = false;\n      }\n    },\n    handleMenuClick: function handleMenuClick(action) {\n      this.showFileMenu = false;\n      switch (action) {\n        case 'save':\n          this.saveFile();\n          break;\n        case 'load':\n          this.loadFile();\n          break;\n        case 'exportHTML':\n          this.exportAsHTML();\n          break;\n        case 'exportPDF':\n          this.exportAsPDF();\n          break;\n      }\n    },\n    changeTheme: function changeTheme() {\n      this.theme = this.theme === 'light' ? 'dark' : 'light';\n      document.documentElement.setAttribute('data-theme', this.theme);\n    },\n    saveFile: function saveFile() {\n      var blob = new Blob([this.getMarkdownContent()], {\n        type: 'text/markdown'\n      });\n      var link = document.createElement('a');\n      link.href = URL.createObjectURL(blob);\n      link.download = 'document.md';\n      link.click();\n    },\n    loadFile: function loadFile() {\n      var _this3 = this;\n      var input = document.createElement('input');\n      input.type = 'file';\n      input.accept = '.md,.markdown';\n      input.onchange = function (e) {\n        var file = e.target.files[0];\n        var reader = new FileReader();\n        reader.onload = function () {\n          _this3.setMarkdownContent(reader.result);\n          _this3.updatePreview();\n        };\n        reader.readAsText(file);\n      };\n      input.click();\n    },\n    exportAsHTML: function exportAsHTML() {\n      _exportAsHTML(this.previewContent, 'markdown_export', {\n        theme: this.theme\n      });\n    },\n    exportAsPDF: function exportAsPDF() {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n        var _t;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.p = _context.n) {\n            case 0:\n              _context.p = 0;\n              _context.n = 1;\n              return _exportAsPDF(_this4.previewContent, 'markdown_export', {\n                theme: _this4.theme\n              });\n            case 1:\n              _context.n = 3;\n              break;\n            case 2:\n              _context.p = 2;\n              _t = _context.v;\n              console.error('导出PDF失败:', _t);\n              alert('导出PDF失败，请重试');\n            case 3:\n              return _context.a(2);\n          }\n        }, _callee, null, [[0, 2]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["marked","hljs","exportAsHTML","exportAsPDF","formatHelpers","data","markdownContent","previewContent","theme","fontFamily","fontSize","hasSelection","showFileMenu","toolbarButtons","name","action","requiresSelection","mounted","setOptions","highlight","code","highlightAuto","value","updatePreview","document","addEventListener","closeFileMenu","beforeDestroy","removeEventListener","methods","handleFormat","type","_this","selection","getSelectionRange","text","content","getMarkdownContent","handleImageSelect","insertLink","result","setMarkdownContent","$nextTick","restoreSelection","newStart","newEnd","window","getSelection","rangeCount","start","end","editor","$refs","range","getRangeAt","preRange","createRange","selectNodeContents","setEnd","startContainer","startOffset","toString","length","endContainer","endOffset","textNode","firstChild","charCount","startNode","endNode","findPosition","node","nodeType","Node","TEXT_NODE","nextCharCount","ELEMENT_NODE","childNodes","Array","from","forEach","setStart","sel","removeAllRanges","addRange","markdown","walk","textContent","tagName","concat","src","_this2","hadSelection","savedRange","cloneRange","innerHTML","newRange","reader","readAsDataURL","file","linkText","prompt","url","includes","alert","markdownLink","newContent","slice","toggleFileMenu","event","fileMenu","contains","target","handleMenuClick","saveFile","loadFile","changeTheme","documentElement","setAttribute","blob","Blob","link","createElement","href","URL","createObjectURL","download","click","_this3","input","accept","onchange","e","files","FileReader","onload","readAsText","_this4","_asyncToGenerator","_regenerator","m","_callee","_t","w","_context","p","n","v","console","error","a"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\" :data-theme=\"theme\">\n    <!-- 顶部工具栏 -->\n    <div class=\"toolbar\">\n      <!-- 文件菜单 -->\n      <div class=\"file-menu-wrapper\" ref=\"fileMenu\">\n        <button \n          class=\"file-menu-btn\" \n          @click.stop=\"toggleFileMenu\"\n          :class=\"{ 'active': showFileMenu }\"\n        >\n          <span>文件 ▼</span>\n        </button>\n        <transition name=\"fade\">\n          <div \n            v-show=\"showFileMenu\" \n            class=\"file-menu-dropdown\"\n            @click.stop\n          >\n            <button @click=\"handleMenuClick('save')\">保存</button>\n            <button @click=\"handleMenuClick('load')\">打开</button>\n            <button @click=\"handleMenuClick('exportHTML')\">导出HTML</button>\n            <button @click=\"handleMenuClick('exportPDF')\">导出PDF</button>\n          </div>\n        </transition>\n      </div>\n\n      <!-- 格式按钮 -->\n      <div class=\"format-buttons\">\n        <button \n          v-for=\"btn in toolbarButtons\" \n          :key=\"btn.name\"\n          @click=\"handleFormat(btn.action)\"\n          :disabled=\"btn.requiresSelection && !hasSelection\"\n          class=\"tool-btn\"\n        >\n          {{ btn.name }}\n        </button>\n      </div>\n\n      <!-- 字体设置 -->\n      <div class=\"font-settings\">\n        <select v-model=\"fontFamily\" class=\"font-select\">\n          <option value=\"'Courier New', monospace\">等宽字体</option>\n          <option value=\"Arial, sans-serif\">Arial</option>\n          <option value=\"'Times New Roman', serif\">Times New Roman</option>\n        </select>\n        <select v-model=\"fontSize\" class=\"size-select\">\n          <option value=\"14px\">小</option>\n          <option value=\"16px\">中</option>\n          <option value=\"18px\">大</option>\n        </select>\n        <button @click=\"changeTheme\" class=\"theme-btn\">\n          {{ theme === 'light' ? '🌙 夜间' : '☀️ 白天' }}\n        </button>\n      </div>\n\n      <!-- 隐藏的图片输入 -->\n      <input \n        ref=\"imageInput\" \n        type=\"file\" \n        accept=\"image/*\" \n        @change=\"handleImageUpload\" \n        style=\"display: none;\"\n      />\n    </div>\n\n    <!-- 编辑区和预览区 -->\n    <div class=\"editor-wrapper\">\n      <div \n        ref=\"editor\"\n        class=\"editor\"\n        contenteditable=\"true\"\n        @input=\"updatePreview\"\n        @mouseup=\"updateSelection\"\n        @keydown=\"handleKeydown\"\n        :style=\"{ fontFamily, fontSize }\"\n        placeholder=\"在这里输入Markdown内容...\"\n      ></div>\n      <div class=\"preview\" :style=\"{ fontFamily, fontSize }\" v-html=\"previewContent\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { marked } from 'marked'\nimport hljs from 'highlight.js'\nimport { exportAsHTML, exportAsPDF } from './lib/exportUtils.js'\nimport { formatHelpers } from './lib/formatUtils.js'\n\nexport default {\n  data() {\n    return {\n      markdownContent: '',\n      previewContent: '',\n      theme: 'light',\n      fontFamily: \"'Courier New', monospace\",\n      fontSize: '14px',\n      hasSelection: false,\n      showFileMenu: false,\n      toolbarButtons: [\n        { name: '加粗', action: 'bold', requiresSelection: true },\n        { name: '斜体', action: 'italic', requiresSelection: true },\n        { name: '删除线', action: 'strikethrough', requiresSelection: true },\n        { name: 'H1', action: 'h1', requiresSelection: true },\n        { name: 'H2', action: 'h2', requiresSelection: true },\n        { name: 'H3', action: 'h3', requiresSelection: true },\n        { name: '无序列表', action: 'ul', requiresSelection: true },\n        { name: '有序列表', action: 'ol', requiresSelection: true },\n        { name: '任务列表', action: 'taskList', requiresSelection: true },\n        { name: '引用', action: 'quote', requiresSelection: true },\n        { name: '行内代码', action: 'code', requiresSelection: true },\n        { name: '代码块', action: 'codeblock', requiresSelection: true },\n        { name: '表格', action: 'table', requiresSelection: true },\n        { name: '插入图片', action: 'image', requiresSelection: false },\n        { name: '插入链接', action: 'link', requiresSelection: false }\n      ]\n    }\n  },\n  mounted() {\n    marked.setOptions({\n      highlight: (code) => hljs.highlightAuto(code).value\n    })\n    this.updatePreview()\n    document.addEventListener('click', this.closeFileMenu)\n  },\n  beforeDestroy() {\n    document.removeEventListener('click', this.closeFileMenu)\n  },\n  methods: {\n    handleFormat(type) {\n      const selection = this.getSelectionRange()\n      if (!selection.text && type !== 'image' && type !== 'link') return\n\n      const content = this.getMarkdownContent()\n\n      if (type === 'image') {\n        this.handleImageSelect()\n        return\n      }\n      if (type === 'link') {\n        this.insertLink(selection)\n        return\n      }\n\n      const result = formatHelpers[type](content, selection)\n      this.setMarkdownContent(result.content)\n      \n      this.$nextTick(() => {\n        this.restoreSelection(result.newStart, result.newEnd)\n        this.updatePreview()\n      })\n    },\n\n    getSelectionRange() {\n      const selection = window.getSelection()\n      if (!selection.rangeCount) return { start: 0, end: 0, text: '' }\n\n      const editor = this.$refs.editor\n      const range = selection.getRangeAt(0)\n      \n      // 计算相对于编辑器内容的绝对位置\n      const preRange = document.createRange()\n      preRange.selectNodeContents(editor)\n      preRange.setEnd(range.startContainer, range.startOffset)\n      const start = preRange.toString().length\n      \n      preRange.setEnd(range.endContainer, range.endOffset)\n      const end = preRange.toString().length\n\n      return {\n        start,\n        end,\n        text: range.toString()\n      }\n    },\n\n    restoreSelection(start, end) {\n      const editor = this.$refs.editor\n      const range = document.createRange()\n      const textNode = editor.firstChild || editor\n      let charCount = 0\n      let startNode, startOffset, endNode, endOffset\n\n      const findPosition = (node) => {\n        if (node.nodeType === Node.TEXT_NODE) {\n          const nextCharCount = charCount + node.length\n          \n          if (!startNode && start >= charCount && start <= nextCharCount) {\n            startNode = node\n            startOffset = start - charCount\n          }\n          \n          if (!endNode && end >= charCount && end <= nextCharCount) {\n            endNode = node\n            endOffset = end - charCount\n          }\n          \n          charCount = nextCharCount\n        } else if (node.nodeType === Node.ELEMENT_NODE && node.childNodes) {\n          Array.from(node.childNodes).forEach(findPosition)\n        }\n      }\n\n      findPosition(textNode)\n      \n      if (!startNode) startNode = textNode, startOffset = 0\n      if (!endNode) endNode = textNode, endOffset = 0\n\n      range.setStart(startNode, startOffset)\n      range.setEnd(endNode, endOffset)\n      \n      const sel = window.getSelection()\n      sel.removeAllRanges()\n      sel.addRange(range)\n    },\n\n    getMarkdownContent() {\n      const editor = this.$refs.editor\n      let markdown = ''\n      \n      const walk = (node) => {\n        if (node.nodeType === Node.TEXT_NODE) {\n          markdown += node.textContent\n        } else if (node.nodeType === Node.ELEMENT_NODE) {\n          if (node.tagName === 'IMG') {\n            markdown += `![图片](${node.src})`\n          } else if (node.tagName === 'BR') {\n            markdown += '\\n'\n          } else {\n            Array.from(node.childNodes).forEach(walk)\n          }\n        }\n      }\n      \n      walk(editor)\n      return markdown\n    },\n\n    setMarkdownContent(content) {\n      // 保存当前选区\n      const selection = window.getSelection()\n      const hadSelection = selection.rangeCount > 0\n      let savedRange = null\n      \n      if (hadSelection) {\n        savedRange = selection.getRangeAt(0).cloneRange()\n      }\n\n      // 更新内容\n      this.$refs.editor.innerHTML = ''\n      this.$refs.editor.textContent = content\n      \n      // 恢复选区\n      if (hadSelection && savedRange) {\n        this.$nextTick(() => {\n          const newRange = document.createRange()\n          newRange.setStart(this.$refs.editor.firstChild, savedRange.startOffset)\n          newRange.setEnd(this.$refs.editor.firstChild, savedRange.endOffset)\n          \n          const sel = window.getSelection()\n          sel.removeAllRanges()\n          sel.addRange(newRange)\n        })\n      }\n      \n      this.updatePreview()\n      reader.readAsDataURL(file)\n    },\r\n\t\n    insertLink(selection) {\n      const linkText = prompt('输入链接文本:', selection.text) || selection.text\n      const url = prompt('输入链接地址:')\n      if (!url) return\n\n      if (selection.text.includes('![图片]')) {\n        alert('图片区域无法插入链接')\n        return\n      }\n\n      const markdownLink = `[${linkText}](${url})`\n      const content = this.getMarkdownContent()\n      const newContent = content.slice(0, selection.start) + markdownLink + content.slice(selection.end)\n      this.setMarkdownContent(newContent)\n      this.updatePreview()\n    },\n    toggleFileMenu() {\n      this.showFileMenu = !this.showFileMenu\n    },\n    closeFileMenu(event) {\n      if (this.$refs.fileMenu && !this.$refs.fileMenu.contains(event.target)) {\n        this.showFileMenu = false\n      }\n    },\n    handleMenuClick(action) {\n      this.showFileMenu = false\n      switch (action) {\n        case 'save': this.saveFile(); break\n        case 'load': this.loadFile(); break\n        case 'exportHTML': this.exportAsHTML(); break\n        case 'exportPDF': this.exportAsPDF(); break\n      }\n    },\n    changeTheme() {\n      this.theme = this.theme === 'light' ? 'dark' : 'light'\n      document.documentElement.setAttribute('data-theme', this.theme)\n    },\n    saveFile() {\n      const blob = new Blob([this.getMarkdownContent()], { type: 'text/markdown' })\n      const link = document.createElement('a')\n      link.href = URL.createObjectURL(blob)\n      link.download = 'document.md'\n      link.click()\n    },\n    loadFile() {\n      const input = document.createElement('input')\n      input.type = 'file'\n      input.accept = '.md,.markdown'\n      input.onchange = e => {\n        const file = e.target.files[0]\n        const reader = new FileReader()\n        reader.onload = () => {\n          this.setMarkdownContent(reader.result)\n          this.updatePreview()\n        }\n        reader.readAsText(file)\n      }\n      input.click()\n    },\n    exportAsHTML() {\n      exportAsHTML(this.previewContent, 'markdown_export', { theme: this.theme })\n    },\n    async exportAsPDF() {\n      try {\n        await exportAsPDF(this.previewContent, 'markdown_export', { theme: this.theme })\n      } catch (error) {\n        console.error('导出PDF失败:', error)\n        alert('导出PDF失败，请重试')\n      }\n    }\n  }\n}\n</script>\n\n\n<style>\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --bg-color: #ffffff;\n  --text-color: #333333;\n  --border-color: #e0e0e0;\n  --toolbar-bg: #f5f5f5;\n  --tool-btn-bg: #ffffff;\n  --tool-btn-hover: #eaeaea;\n  --menu-bg: #ffffff;\n  --menu-item-hover: #f0f0f0;\r\n  --table-header-bg: #f5f5f5;\r\n  --table-row-even-bg: #f9f9f9;\n}\n\n[data-theme=\"dark\"] {\n  --bg-color: #1e1e1e;\n  --text-color: #e0e0e0;\n  --border-color: #444444;\n  --toolbar-bg: #2d2d2d;\n  --tool-btn-bg: #3d3d3d;\n  --tool-btn-hover: #4d4d4d;\n  --menu-bg: #3d3d3d;\n  --menu-item-hover: #4d4d4d;\r\n  --table-header-bg: #3d3d3d;\r\n  --table-row-even-bg: #2d2d2d;\n}\n\n.app-container {\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background-color: var(--bg-color);\n  color: var(--text-color);\n}\n\n/* 工具栏样式 */\n.toolbar {\n  padding: 8px 15px;\n  background-color: var(--toolbar-bg);\n  border-bottom: 1px solid var(--border-color);\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n\n/* 文件菜单 */\n.file-menu-wrapper {\n  position: relative;\n  display: inline-block;\n}\n\n.file-menu-btn {\n  padding: 8px 15px;\n  background-color: var(--tool-btn-bg);\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 14px;\n  transition: all 0.2s;\n}\n\n.file-menu-btn:hover, .file-menu-btn.active {\n  background-color: var(--tool-btn-hover);\n}\n\n.file-menu-dropdown {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  min-width: 120px;\n  background-color: var(--menu-bg);\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  margin-top: 5px;\n}\n\n.file-menu-dropdown button {\n  display: block;\n  width: 100%;\n  padding: 8px 16px;\n  text-align: left;\n  background: none;\n  border: none;\n  color: var(--text-color);\n  cursor: pointer;\n}\n\n.file-menu-dropdown button:hover {\n  background-color: var(--menu-item-hover);\n}\n\n/* 过渡动画 */\n.fade-enter-active, .fade-leave-active {\n  transition: opacity 0.3s, transform 0.3s;\n}\n.fade-enter, .fade-leave-to {\n  opacity: 0;\n  transform: translateY(-10px);\n}\n\n/* 格式按钮 */\n.format-buttons {\n  display: flex;\n  gap: 8px;\n}\n\n.tool-btn {\n  padding: 8px 12px;\n  background-color: var(--tool-btn-bg);\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 14px;\n  transition: all 0.2s;\n}\n\n.tool-btn:hover {\n  background-color: var(--tool-btn-hover);\n}\n\n.tool-btn:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n/* 字体设置 */\n.font-settings {\n  margin-left: auto;\n  display: flex;\n  gap: 8px;\n  align-items: center;\n}\n\n.font-select, .size-select {\n  padding: 6px 8px;\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  background-color: var(--tool-btn-bg);\n  color: var(--text-color);\n}\n\n.theme-btn {\n  padding: 6px 12px;\n  background-color: var(--tool-btn-bg);\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n/* 编辑器区域 */\n.editor-wrapper {\n  display: flex;\n  flex: 1;\n  overflow: hidden;\n}\n\n.editor, .preview {\n  flex: 1;\n  padding: 20px;\n  overflow: auto;\n}\r\n\n.editor img {\n  max-width: 100%;\n  height: auto;\n  display: block;\n  margin: 12px 0;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n  cursor: pointer;\n}\r\n\n.editor {\n  padding: 20px;\n  border-right: 1px solid var(--border-color);\n  resize: none;\n  line-height: 1.6;\n  background-color: var(--bg-color);\n  color: var(--text-color);\n  outline: none;\n  min-height: 200px;\n}\r\n\n.preview {\n  padding: 20px;\n  overflow: auto;             /* 超出时显示滚动条 */\n  word-break: break-word;     /* 长文本自动换行 */\n}\n\n/* 预览区域Markdown样式 */\r\n.preview table {\n  border-collapse: collapse;\n  width: 100%;\n  margin: 16px 0;\n  display: block;\n  overflow-x: auto;\n}\n\n.preview th, .preview td {\n  padding: 8px 12px;\n  border: 1px solid var(--border-color);\n}\n\n.preview th {\n  background-color: var(--table-header-bg);\n  font-weight: bold;\n}\n\n.preview tr:nth-child(even) {\n  background-color: var(--table-row-even-bg);\n}\n\n.preview h1, .preview h2, .preview h3 {\n  margin: 20px 0 10px;\n}\n\n.preview ul, .preview ol {\n  padding-left: 30px;\n  margin: 10px 0;\n}\n\n.preview code {\n  background-color: rgba(215, 215, 215, 0.2);\n  padding: 0.2em 0.4em;\n  border-radius: 3px;\n  font-family: 'Consolas', monospace;\n}\n\n.preview pre {\n  background-color: rgba(215, 215, 215, 0.2);\n  padding: 16px;\n  border-radius: 3px;\n  overflow: auto;\n  margin: 10px 0;\n}\n\n.preview blockquote {\n  border-left: 4px solid #dfe2e5;\n  color: #6a737d;\n  padding: 0 1em;\n  margin: 10px 0;\n}\r\n\r\n.preview img {\n  max-width: 100%;\n  height: auto;\n  display: block;\n  margin: 12px 0;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n  transition: transform 0.2s ease;\n}\n\n.preview img:hover {\n  transform: scale(1.03);     /* 悬停轻微放大 */\n  box-shadow: 0 6px 16px rgba(0,0,0,0.2); /* 悬停阴影加深 */\n}\r\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}