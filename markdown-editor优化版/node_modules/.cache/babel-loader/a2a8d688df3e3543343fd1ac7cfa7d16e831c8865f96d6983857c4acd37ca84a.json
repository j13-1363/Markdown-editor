{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.string.trim-start.js\";\nexport function handleCodeFormat(content, selection) {\n  return handleMultilineFormat(content, selection, '```', '\\n```');\n}\n\n/**\n * Markdown 格式工具集\n * 提供文本格式检测、添加/移除格式等功能\n */\n\n/**\n * 检测文本中应用的Markdown格式\n * @param {string} text 要检测的文本\n * @returns {Object} 格式状态对象\n */\nexport function detectFormats(text) {\n  if (!text) return {};\n  return {\n    bold: text.startsWith('**') && text.endsWith('**'),\n    italic: text.startsWith('_') && text.endsWith('_'),\n    h1: text.startsWith('# '),\n    h2: text.startsWith('## '),\n    h3: text.startsWith('### '),\n    ul: text.startsWith('- '),\n    ol: /^\\d+\\. /.test(text),\n    code: text.startsWith('`') && text.endsWith('`'),\n    codeblock: text.startsWith('```\\n') && text.endsWith('\\n```')\n  };\n}\n\n/**\n * 检查文本是否被指定字符包裹\n * @param {string} text 要检查的文本\n * @param {string} prefix 前缀\n * @param {string} [suffix] 后缀（默认同前缀）\n * @returns {boolean}\n */\nfunction isWrappedWith(text, prefix) {\n  var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : prefix;\n  return text.startsWith(prefix) && text.endsWith(suffix);\n}\n\n/**\n * 切换Markdown格式（添加/移除）\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function toggleMarkdownFormat(content, selection, prefix, suffix) {\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n  var isFormatted = isWrappedWith(text, prefix, suffix);\n  if (isFormatted) {\n    return removeMarkdownFormat(content, selection, prefix, suffix);\n  } else {\n    return addMarkdownFormat(content, selection, prefix, suffix);\n  }\n}\n\n/**\n * 添加Markdown格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function addMarkdownFormat(content, selection, prefix, suffix) {\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n  return {\n    content: content.slice(0, start) + prefix + text + suffix + content.slice(end),\n    newStart: start + prefix.length,\n    newEnd: end + prefix.length\n  };\n}\n\n/**\n * 移除Markdown格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function removeMarkdownFormat(content, selection, prefix, suffix) {\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n  return {\n    content: content.slice(0, start) + text.slice(prefix.length, -suffix.length) + content.slice(end),\n    newStart: start,\n    newEnd: end - prefix.length - suffix.length\n  };\n}\n\n/**\n * 插入Markdown链接\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} linkText 链接文字\n * @param {string} url 链接地址\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function insertMarkdownLink(content, selection, linkText, url) {\n  var start = selection.start,\n    end = selection.end;\n  var markdownLink = \"[\".concat(linkText, \"](\").concat(url, \")\");\n  return {\n    content: content.slice(0, start) + markdownLink + content.slice(end),\n    newStart: start + markdownLink.length,\n    newEnd: start + markdownLink.length\n  };\n}\n\n/**\n * 插入Markdown图片\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} altText 替代文字\n * @param {string} imagePath 图片地址\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function insertMarkdownImage(content, selection, altText, imagePath) {\n  var start = selection.start,\n    end = selection.end;\n  var markdownImage = \"![\".concat(altText, \"](\").concat(imagePath, \")\");\n  return {\n    content: content.slice(0, start) + markdownImage + content.slice(end),\n    newStart: start + markdownImage.length,\n    newEnd: start + markdownImage.length\n  };\n}\n\n/**\n * 智能处理列表格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} type 列表类型 ('ul' 或 'ol')\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function handleListFormat(content, selection) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'ul';\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n  var lines = text.split('\\n');\n  var isAlreadyList = lines.every(function (line) {\n    return type === 'ul' ? line.startsWith('- ') || line.startsWith('* ') : /^\\d+\\. /.test(line);\n  });\n  if (isAlreadyList) {\n    var newLines = lines.map(function (line) {\n      return type === 'ul' ? line.replace(/^-|^\\*/g, '').trimStart() : line.replace(/^\\d+\\.\\s*/, '');\n    });\n    var newText = newLines.join('\\n');\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    };\n  } else {\n    var _newLines = lines.map(function (line, i) {\n      return type === 'ul' ? \"- \".concat(line) : \"\".concat(i + 1, \". \").concat(line);\n    });\n    var _newText = _newLines.join('\\n');\n    var lengthDiff = _newText.length - text.length;\n    return {\n      content: content.slice(0, start) + _newText + content.slice(end),\n      newStart: start,\n      newEnd: end + lengthDiff\n    };\n  }\n}\n\n/**\n * 处理多行格式（如代码块、引用）\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 每行前缀\n * @param {string} [suffix] 每行后缀（可选）\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function handleMultilineFormat(content, selection, prefix) {\n  var suffix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n  var lines = text.split('\\n');\n  var isFormatted = lines.every(function (line) {\n    return line.startsWith(prefix) && (suffix ? line.endsWith(suffix) : true);\n  });\n  if (isFormatted) {\n    var newLines = lines.map(function (line) {\n      return suffix ? line.slice(prefix.length, -suffix.length) : line.slice(prefix.length);\n    });\n    var newText = newLines.join('\\n');\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    };\n  } else {\n    var _newLines2 = lines.map(function (line) {\n      return prefix + line + suffix;\n    });\n    var _newText2 = _newLines2.join('\\n');\n    var lengthDiff = _newText2.length - text.length;\n    return {\n      content: content.slice(0, start) + _newText2 + content.slice(end),\n      newStart: start,\n      newEnd: end + lengthDiff\n    };\n  }\n}\n\n// 常用格式的快捷方法\nexport var formatHelpers = {\n  bold: function bold(content, selection) {\n    return toggleMarkdownFormat(content, selection, '**', '**');\n  },\n  italic: function italic(content, selection) {\n    return toggleMarkdownFormat(content, selection, '_', '_');\n  },\n  h1: function h1(content, selection) {\n    return toggleMarkdownFormat(content, selection, '# ', '');\n  },\n  h2: function h2(content, selection) {\n    return toggleMarkdownFormat(content, selection, '## ', '');\n  },\n  h3: function h3(content, selection) {\n    return toggleMarkdownFormat(content, selection, '### ', '');\n  },\n  ul: function ul(content, selection) {\n    return handleListFormat(content, selection, 'ul');\n  },\n  ol: function ol(content, selection) {\n    return handleListFormat(content, selection, 'ol');\n  },\n  code: function code(content, selection) {\n    return handleMultilineFormat(content, selection, '```\\n', '\\n```');\n  },\n  quote: function quote(content, selection) {\n    return handleMultilineFormat(content, selection, '> ');\n  },\n  image: function image(content, selection, imagePath) {\n    return insertMarkdownImage(content, selection, '图片描述', imagePath);\n  },\n  link: function link(content, selection, linkText, url) {\n    if (selection.text.includes('![图片]')) return {\n      content: content,\n      newStart: selection.start\n    };\n    return insertMarkdownLink(content, selection, linkText, url);\n  }\n};","map":{"version":3,"names":["handleCodeFormat","content","selection","handleMultilineFormat","detectFormats","text","bold","startsWith","endsWith","italic","h1","h2","h3","ul","ol","test","code","codeblock","isWrappedWith","prefix","suffix","arguments","length","undefined","toggleMarkdownFormat","start","end","isFormatted","removeMarkdownFormat","addMarkdownFormat","slice","newStart","newEnd","insertMarkdownLink","linkText","url","markdownLink","concat","insertMarkdownImage","altText","imagePath","markdownImage","handleListFormat","type","lines","split","isAlreadyList","every","line","newLines","map","replace","trimStart","newText","join","i","lengthDiff","formatHelpers","quote","image","link","includes"],"sources":["D:/作业/markdown-editor优化版/src/lib/formatUtils.js"],"sourcesContent":["export function handleCodeFormat(content, selection) {\n  return handleMultilineFormat(content, selection, '```', '\\n```')\n}\n\n/**\n * Markdown 格式工具集\n * 提供文本格式检测、添加/移除格式等功能\n */\n\n/**\n * 检测文本中应用的Markdown格式\n * @param {string} text 要检测的文本\n * @returns {Object} 格式状态对象\n */\nexport function detectFormats(text) {\n  if (!text) return {};\n\n  return {\n    bold: text.startsWith('**') && text.endsWith('**'),\n    italic: text.startsWith('_') && text.endsWith('_'),\n    h1: text.startsWith('# '),\n    h2: text.startsWith('## '),\n    h3: text.startsWith('### '),\n    ul: text.startsWith('- '),\n    ol: /^\\d+\\. /.test(text),\n    code: text.startsWith('`') && text.endsWith('`'),\n    codeblock: text.startsWith('```\\n') && text.endsWith('\\n```')\n  };\n}\n\n/**\n * 检查文本是否被指定字符包裹\n * @param {string} text 要检查的文本\n * @param {string} prefix 前缀\n * @param {string} [suffix] 后缀（默认同前缀）\n * @returns {boolean}\n */\nfunction isWrappedWith(text, prefix, suffix = prefix) {\n  return text.startsWith(prefix) && text.endsWith(suffix);\n}\n\n/**\n * 切换Markdown格式（添加/移除）\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function toggleMarkdownFormat(content, selection, prefix, suffix) {\n  const { start, end, text } = selection;\n\n  const isFormatted = isWrappedWith(text, prefix, suffix);\n\n  if (isFormatted) {\n    return removeMarkdownFormat(content, selection, prefix, suffix);\n  } else {\n    return addMarkdownFormat(content, selection, prefix, suffix);\n  }\n}\n\n/**\n * 添加Markdown格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function addMarkdownFormat(content, selection, prefix, suffix) {\n  const { start, end, text } = selection;\n\n  return {\n    content: content.slice(0, start) + prefix + text + suffix + content.slice(end),\n    newStart: start + prefix.length,\n    newEnd: end + prefix.length,\n  };\n}\n\n/**\n * 移除Markdown格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function removeMarkdownFormat(content, selection, prefix, suffix) {\n  const { start, end, text } = selection;\n\n  return {\n    content:\n      content.slice(0, start) +\n      text.slice(prefix.length, -suffix.length) +\n      content.slice(end),\n    newStart: start,\n    newEnd: end - prefix.length - suffix.length,\n  };\n}\n\n/**\n * 插入Markdown链接\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} linkText 链接文字\n * @param {string} url 链接地址\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function insertMarkdownLink(content, selection, linkText, url) {\n  const { start, end } = selection;\n  const markdownLink = `[${linkText}](${url})`;\n\n  return {\n    content: content.slice(0, start) + markdownLink + content.slice(end),\n    newStart: start + markdownLink.length,\n    newEnd: start + markdownLink.length,\n  };\n}\n\n/**\n * 插入Markdown图片\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} altText 替代文字\n * @param {string} imagePath 图片地址\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function insertMarkdownImage(content, selection, altText, imagePath) {\n  const { start, end } = selection;\n  const markdownImage = `![${altText}](${imagePath})`;\n\n  return {\n    content: content.slice(0, start) + markdownImage + content.slice(end),\n    newStart: start + markdownImage.length,\n    newEnd: start + markdownImage.length,\n  };\n}\n\n/**\n * 智能处理列表格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} type 列表类型 ('ul' 或 'ol')\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function handleListFormat(content, selection, type = 'ul') {\n  const { start, end, text } = selection;\n  const lines = text.split('\\n');\n\n  const isAlreadyList = lines.every(line => \n    type === 'ul' \n      ? line.startsWith('- ') || line.startsWith('* ') \n      : /^\\d+\\. /.test(line)\n  );\n\n  if (isAlreadyList) {\n    const newLines = lines.map(line => \n      type === 'ul' \n        ? line.replace(/^-|^\\*/g, '').trimStart() \n        : line.replace(/^\\d+\\.\\s*/, '')\n    );\n    const newText = newLines.join('\\n');\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    };\n  } else {\n    const newLines = lines.map((line, i) => \n      type === 'ul' ? `- ${line}` : `${i + 1}. ${line}`\n    );\n    const newText = newLines.join('\\n');\n    const lengthDiff = newText.length - text.length;\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: end + lengthDiff\n    };\n  }\n}\n\n/**\n * 处理多行格式（如代码块、引用）\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 每行前缀\n * @param {string} [suffix] 每行后缀（可选）\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function handleMultilineFormat(content, selection, prefix, suffix = '') {\n  const { start, end, text } = selection;\n  const lines = text.split('\\n');\n\n  const isFormatted = lines.every(line => \n    line.startsWith(prefix) && (suffix ? line.endsWith(suffix) : true)\n  );\n\n  if (isFormatted) {\n    const newLines = lines.map(line => \n      suffix \n        ? line.slice(prefix.length, -suffix.length) \n        : line.slice(prefix.length)\n    );\n    const newText = newLines.join('\\n');\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    };\n  } else {\n    const newLines = lines.map(line => prefix + line + suffix);\n    const newText = newLines.join('\\n');\n    const lengthDiff = newText.length - text.length;\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: end + lengthDiff\n    };\n  }\n}\n\n// 常用格式的快捷方法\nexport const formatHelpers = {\n  bold: (content, selection) => toggleMarkdownFormat(content, selection, '**', '**'),\n  italic: (content, selection) => toggleMarkdownFormat(content, selection, '_', '_'),\n  h1: (content, selection) => toggleMarkdownFormat(content, selection, '# ', ''),\n  h2: (content, selection) => toggleMarkdownFormat(content, selection, '## ', ''),\n  h3: (content, selection) => toggleMarkdownFormat(content, selection, '### ', ''),\n  ul: (content, selection) => handleListFormat(content, selection, 'ul'),\n  ol: (content, selection) => handleListFormat(content, selection, 'ol'),\n  code: (content, selection) => handleMultilineFormat(content, selection, '```\\n', '\\n```'),\n  quote: (content, selection) => handleMultilineFormat(content, selection, '> '),\n  image: (content, selection, imagePath) => insertMarkdownImage(content, selection, '图片描述', imagePath),\n    link: (content, selection, linkText, url) => {if (selection.text.includes('![图片]')) return { content, newStart: selection.start };\r\n      return insertMarkdownLink(content, selection, linkText, url);\r\n    },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}