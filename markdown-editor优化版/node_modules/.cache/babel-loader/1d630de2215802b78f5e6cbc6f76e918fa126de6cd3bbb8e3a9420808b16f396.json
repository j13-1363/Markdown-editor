{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nexport function handleCodeFormat(content, selection) {\n  return handleMultilineFormat(content, selection, '```', '\\n```');\n}\n/**\n * Markdown 格式工具集\n * 提供文本格式检测、添加/移除格式等功能\n */\n\n/**\n * 检测文本中应用的Markdown格式\n * @param {string} text 要检测的文本\n * @returns {Object} 格式状态对象\n */\nexport function detectFormats(text) {\n  if (!text) return {};\n  return {\n    bold: text.startsWith('**') && text.endsWith('**'),\n    italic: text.startsWith('_') && text.endsWith('_'),\n    h1: text.startsWith('# '),\n    h2: text.startsWith('## '),\n    h3: text.startsWith('### '),\n    ul: text.startsWith('- '),\n    ol: /^\\d+\\. /.test(text),\n    code: text.startsWith('`') && text.endsWith('`'),\n    codeblock: text.startsWith('```\\n') && text.endsWith('\\n```')\n  };\n}\n\n/**\n * 检查文本是否被指定字符包裹\n * @param {string} text 要检查的文本\n * @param {string} prefix 前缀\n * @param {string} [suffix] 后缀（默认同前缀）\n * @returns {boolean}\n */\nfunction isWrappedWith(text, prefix) {\n  var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : prefix;\n  return text.startsWith(prefix) && text.endsWith(suffix);\n}\n\n/**\n * 切换Markdown格式（添加/移除）\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function toggleMarkdownFormat(content, selection, prefix, suffix) {\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n\n  // 检查是否已应用格式\n  var isFormatted = isWrappedWith(text, prefix, suffix);\n  if (isFormatted) {\n    return removeMarkdownFormat(content, selection, prefix, suffix);\n  } else {\n    return addMarkdownFormat(content, selection, prefix, suffix);\n  }\n}\n\n/**\n * 添加Markdown格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function addMarkdownFormat(content, selection, prefix, suffix) {\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n  return {\n    content: content.slice(0, start) + prefix + text + suffix + content.slice(end),\n    newStart: start + prefix.length,\n    newEnd: end + prefix.length\n  };\n}\n\n/**\n * 移除Markdown格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function removeMarkdownFormat(content, selection, prefix, suffix) {\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n  return {\n    content: content.slice(0, start) + text.slice(prefix.length, -suffix.length) + content.slice(end),\n    newStart: start,\n    newEnd: end - prefix.length - suffix.length\n  };\n}\n\n/**\n * 插入Markdown链接\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} linkText 链接文字\n * @param {string} url 链接地址\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function insertMarkdownLink(content, selection, linkText, url) {\n  var start = selection.start,\n    end = selection.end;\n  var markdownLink = \"[\".concat(linkText, \"](\").concat(url, \")\");\n  return {\n    content: content.slice(0, start) + markdownLink + content.slice(end),\n    newStart: start + markdownLink.length,\n    newEnd: start + markdownLink.length\n  };\n}\n\n/**\n * 插入Markdown图片\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} altText 替代文字\n * @param {string} url 图片地址\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function insertMarkdownImage(content, selection, altText, url) {\n  var start = selection.start,\n    end = selection.end;\n  var markdownImage = \"![\".concat(altText, \"](\").concat(url, \")\");\n  return {\n    content: content.slice(0, start) + markdownImage + content.slice(end),\n    newStart: start + markdownImage.length,\n    newEnd: start + markdownImage.length\n  };\n}\n\n/**\n * 智能处理列表格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} type 列表类型 ('ul' 或 'ol')\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\n// 更新handleListFormat方法\nexport function handleListFormat(content, selection) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'ul';\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n  var lines = text.split('\\n');\n\n  // 检查是否已经是列表\n  var isAlreadyList = lines.every(function (line) {\n    return type === 'ul' ? line.startsWith('- ') || line.startsWith('* ') : /^\\d+\\. /.test(line);\n  });\n  if (isAlreadyList) {\n    // 移除列表格式\n    var newLines = lines.map(function (line) {\n      return type === 'ul' ? line.replace(/^[-*] /, '') : line.replace(/^\\d+\\. /, '');\n    });\n    var newText = newLines.join('\\n');\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    };\n  } else {\n    // 添加列表格式\n    var _newLines = lines.map(function (line, i) {\n      return type === 'ul' ? \"- \".concat(line) : \"\".concat(i + 1, \". \").concat(line);\n    });\n    var _newText = _newLines.join('\\n');\n    var lengthDiff = _newText.length - text.length;\n    return {\n      content: content.slice(0, start) + _newText + content.slice(end),\n      newStart: start,\n      newEnd: end + lengthDiff\n    };\n  }\n}\n\n/**\n * 处理多行格式（如代码块、引用）\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 每行前缀\n * @param {string} [suffix] 每行后缀（可选）\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function handleMultilineFormat(content, selection, prefix) {\n  var suffix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n  var lines = text.split('\\n');\n\n  // 检查是否已经应用格式\n  var isFormatted = lines.every(function (line) {\n    return line.startsWith(prefix) && (suffix ? line.endsWith(suffix) : true);\n  });\n  if (isFormatted) {\n    // 移除格式\n    var newLines = lines.map(function (line) {\n      return suffix ? line.slice(prefix.length, -suffix.length) : line.slice(prefix.length);\n    });\n    var newText = newLines.join('\\n');\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    };\n  } else {\n    // 添加格式\n    var _newLines2 = lines.map(function (line) {\n      return prefix + line + suffix;\n    });\n    var _newText2 = _newLines2.join('\\n');\n    var lengthDiff = _newText2.length - text.length;\n    return {\n      content: content.slice(0, start) + _newText2 + content.slice(end),\n      newStart: start,\n      newEnd: end + lengthDiff\n    };\n  }\n}\n\n// 常用格式的快捷方法\nexport var formatHelpers = {\n  bold: function bold(content, selection) {\n    return toggleMarkdownFormat(content, selection, '**', '**');\n  },\n  italic: function italic(content, selection) {\n    return toggleMarkdownFormat(content, selection, '_', '_');\n  },\n  h1: function h1(content, selection) {\n    return toggleMarkdownFormat(content, selection, '# ', '');\n  },\n  h2: function h2(content, selection) {\n    return toggleMarkdownFormat(content, selection, '## ', '');\n  },\n  h3: function h3(content, selection) {\n    return toggleMarkdownFormat(content, selection, '### ', '');\n  },\n  ul: function ul(content, selection) {\n    return handleListFormat(content, selection, 'ul');\n  },\n  ol: function ol(content, selection) {\n    return handleListFormat(content, selection, 'ol');\n  },\n  code: function code(content, selection) {\n    return handleMultilineFormat(content, selection, '```\\n', '\\n```');\n  },\n  quote: function quote(content, selection) {\n    return handleMultilineFormat(content, selection, '> ');\n  },\n  table: function table(content, selection) {\n    var prefix = \"\\n| Header 1 | Header 2 | Header 3 |\\n|----------|----------|----------|\\n| Cell 1   | Cell 2   | Cell 3   |\\n| Cell 4   | Cell 5   | Cell 6   |\\n\";\n    var newContent = content.slice(0, selection.start) + prefix + content.slice(selection.end);\n    var newStart = selection.start + prefix.length;\n    return {\n      content: newContent,\n      newStart: newStart,\n      newEnd: newStart\n    };\n  },\n  link: function link(content, selection) {\n    return insertMarkdownLink(content, selection, '链接文字', 'https://example.com');\n  },\n  image: function image(content, selection) {\n    return insertMarkdownImage(content, selection, '替代文字', 'image.jpg');\n  }\n};","map":{"version":3,"names":["handleCodeFormat","content","selection","handleMultilineFormat","detectFormats","text","bold","startsWith","endsWith","italic","h1","h2","h3","ul","ol","test","code","codeblock","isWrappedWith","prefix","suffix","arguments","length","undefined","toggleMarkdownFormat","start","end","isFormatted","removeMarkdownFormat","addMarkdownFormat","slice","newStart","newEnd","insertMarkdownLink","linkText","url","markdownLink","concat","insertMarkdownImage","altText","markdownImage","handleListFormat","type","lines","split","isAlreadyList","every","line","newLines","map","replace","newText","join","i","lengthDiff","formatHelpers","quote","table","newContent","link","image"],"sources":["D:/作业/markdown-editor优化版/src/lib/formatUtils.js"],"sourcesContent":["export function handleCodeFormat(content, selection) {\n  return handleMultilineFormat(content, selection, '```', '\\n```');\n}\n/**\n * Markdown 格式工具集\n * 提供文本格式检测、添加/移除格式等功能\n */\n\n/**\n * 检测文本中应用的Markdown格式\n * @param {string} text 要检测的文本\n * @returns {Object} 格式状态对象\n */\nexport function detectFormats(text) {\n  if (!text) return {};\n  \n  return {\n    bold: text.startsWith('**') && text.endsWith('**'),\n    italic: text.startsWith('_') && text.endsWith('_'),\n    h1: text.startsWith('# '),\n    h2: text.startsWith('## '),\n    h3: text.startsWith('### '),\n    ul: text.startsWith('- '),\n    ol: /^\\d+\\. /.test(text),\n    code: text.startsWith('`') && text.endsWith('`'),\n    codeblock: text.startsWith('```\\n') && text.endsWith('\\n```')\n  };\n}\n\n\n/**\n * 检查文本是否被指定字符包裹\n * @param {string} text 要检查的文本\n * @param {string} prefix 前缀\n * @param {string} [suffix] 后缀（默认同前缀）\n * @returns {boolean}\n */\nfunction isWrappedWith(text, prefix, suffix = prefix) {\n  return text.startsWith(prefix) && text.endsWith(suffix)\n}\n\n/**\n * 切换Markdown格式（添加/移除）\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function toggleMarkdownFormat(content, selection, prefix, suffix) {\n  const { start, end, text } = selection\n  \n  // 检查是否已应用格式\n  const isFormatted = isWrappedWith(text, prefix, suffix)\n  \n  if (isFormatted) {\n    return removeMarkdownFormat(content, selection, prefix, suffix)\n  } else {\n    return addMarkdownFormat(content, selection, prefix, suffix)\n  }\n}\n\n/**\n * 添加Markdown格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function addMarkdownFormat(content, selection, prefix, suffix) {\n  const { start, end, text } = selection\n  \n  return {\n    content: content.slice(0, start) + \n             prefix + text + suffix + \n             content.slice(end),\n    newStart: start + prefix.length,\n    newEnd: end + prefix.length\n  }\n}\n\n/**\n * 移除Markdown格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 格式前缀\n * @param {string} suffix 格式后缀\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function removeMarkdownFormat(content, selection, prefix, suffix) {\n  const { start, end, text } = selection\n  \n  return {\n    content: content.slice(0, start) + \n             text.slice(prefix.length, -suffix.length) + \n             content.slice(end),\n    newStart: start,\n    newEnd: end - prefix.length - suffix.length\n  }\n}\n\n/**\n * 插入Markdown链接\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} linkText 链接文字\n * @param {string} url 链接地址\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function insertMarkdownLink(content, selection, linkText, url) {\n  const { start, end } = selection\n  const markdownLink = `[${linkText}](${url})`\n  \n  return {\n    content: content.slice(0, start) + \n             markdownLink + \n             content.slice(end),\n    newStart: start + markdownLink.length,\n    newEnd: start + markdownLink.length\n  }\n}\n\n/**\n * 插入Markdown图片\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} altText 替代文字\n * @param {string} url 图片地址\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function insertMarkdownImage(content, selection, altText, url) {\n  const { start, end } = selection\n  const markdownImage = `![${altText}](${url})`\n  \n  return {\n    content: content.slice(0, start) + \n             markdownImage + \n             content.slice(end),\n    newStart: start + markdownImage.length,\n    newEnd: start + markdownImage.length\n  }\n}\n\n/**\n * 智能处理列表格式\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} type 列表类型 ('ul' 或 'ol')\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\n// 更新handleListFormat方法\nexport function handleListFormat(content, selection, type = 'ul') {\n  const { start, end, text } = selection;\n  const lines = text.split('\\n');\n\n  // 检查是否已经是列表\n  const isAlreadyList = lines.every(line => \n    type === 'ul' \n      ? line.startsWith('- ') || line.startsWith('* ')\n      : /^\\d+\\. /.test(line)\n  );\n\n  if (isAlreadyList) {\n    // 移除列表格式\n    const newLines = lines.map(line => \n      type === 'ul' \n        ? line.replace(/^[-*] /, '') \n        : line.replace(/^\\d+\\. /, '')\n    );\n    const newText = newLines.join('\\n');\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    };\n  } else {\n    // 添加列表格式\n    const newLines = lines.map((line, i) => \n      type === 'ul' \n        ? `- ${line}` \n        : `${i + 1}. ${line}`\n    );\n    const newText = newLines.join('\\n');\n    const lengthDiff = newText.length - text.length;\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: end + lengthDiff\n    };\n  }\n}\n\n\n\n/**\n * 处理多行格式（如代码块、引用）\n * @param {string} content 完整内容\n * @param {Object} selection 选区对象 { start, end, text }\n * @param {string} prefix 每行前缀\n * @param {string} [suffix] 每行后缀（可选）\n * @returns {Object} 结果对象 { content, newStart, newEnd }\n */\nexport function handleMultilineFormat(content, selection, prefix, suffix = '') {\n  const { start, end, text } = selection\n  const lines = text.split('\\n')\n  \n  // 检查是否已经应用格式\n  const isFormatted = lines.every(line => \n    line.startsWith(prefix) && (suffix ? line.endsWith(suffix) : true)\n  )\n  \n  if (isFormatted) {\n    // 移除格式\n    const newLines = lines.map(line => \n      suffix \n        ? line.slice(prefix.length, -suffix.length)\n        : line.slice(prefix.length)\n    )\n    const newText = newLines.join('\\n')\n    \n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    }\n  } else {\n    // 添加格式\n    const newLines = lines.map(line => prefix + line + suffix)\n    const newText = newLines.join('\\n')\n    const lengthDiff = newText.length - text.length\n    \n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: end + lengthDiff\n    }\n  }\n} \n\n// 常用格式的快捷方法\nexport const formatHelpers = {\n  bold: (content, selection) => \n    toggleMarkdownFormat(content, selection, '**', '**'),\n  \n  italic: (content, selection) => \n    toggleMarkdownFormat(content, selection, '_', '_'),\n  \n  h1: (content, selection) => \n    toggleMarkdownFormat(content, selection, '# ', ''),\n  \n  h2: (content, selection) => \n    toggleMarkdownFormat(content, selection, '## ', ''),\n  \n  h3: (content, selection) => \n    toggleMarkdownFormat(content, selection, '### ', ''),\n  \n  ul: (content, selection) => \n    handleListFormat(content, selection, 'ul'),\n  \n  ol: (content, selection) => \n    handleListFormat(content, selection, 'ol'),\n  \n  code: (content, selection) => \n    handleMultilineFormat(content, selection, '```\\n', '\\n```'),\n  \n  quote: (content, selection) => \n    handleMultilineFormat(content, selection, '> '),\r\n\t\r\n  table: (content, selection) => {\n    const prefix = `\\n| Header 1 | Header 2 | Header 3 |\\n|----------|----------|----------|\\n| Cell 1   | Cell 2   | Cell 3   |\\n| Cell 4   | Cell 5   | Cell 6   |\\n`;\n    const newContent = content.slice(0, selection.start) + prefix + content.slice(selection.end);\n    const newStart = selection.start + prefix.length;\n    return { content: newContent, newStart, newEnd: newStart };\n  },\r\n  \r\n   link: (content, selection) => {\r\n      return insertMarkdownLink(content, selection, '链接文字', 'https://example.com');\r\n   },\r\n   \r\n   image: (content, selection) => {\r\n      return insertMarkdownImage(content, selection, '替代文字', 'image.jpg');\r\n\t}\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}