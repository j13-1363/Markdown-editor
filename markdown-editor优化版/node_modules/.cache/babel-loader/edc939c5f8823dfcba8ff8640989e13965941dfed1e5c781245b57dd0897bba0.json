{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.repeat.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.string.trim-start.js\";\nexport function handleCodeFormat(content, selection) {\n  return handleMultilineFormat(content, selection, '```', '\\n```');\n}\nexport function detectFormats(text) {\n  if (!text || typeof text !== 'string') return {};\n  var lines = text.split('\\n');\n  var isMultiline = lines.length > 1;\n  return {\n    bold: /^\\*\\*.+\\*\\*$/.test(text),\n    italic: /^_.+_$/.test(text),\n    strikethrough: /^~~.+~~$/.test(text),\n    h1: /^#\\s.+$/.test(text),\n    h2: /^##\\s.+$/.test(text),\n    h3: /^###\\s.+$/.test(text),\n    ul: lines.every(function (line) {\n      return /^\\s*[-*+]\\s.+$/.test(line);\n    }),\n    ol: lines.every(function (line) {\n      return /^\\s*\\d+\\.\\s.+$/.test(line);\n    }),\n    taskList: lines.every(function (line) {\n      return /^\\s*[-*+]\\s\\[[ xX]\\]\\s.+$/.test(line);\n    }),\n    code: /^`.+`$/.test(text),\n    codeblock: /^```[^\\n]*\\n[\\s\\S]*?\\n```$/.test(text),\n    quote: lines.every(function (line) {\n      return /^\\s*>/.test(line);\n    })\n  };\n}\nfunction isWrappedWith(text, prefix) {\n  var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : prefix;\n  if (!text || !prefix) return false;\n  return text.startsWith(prefix) && text.endsWith(suffix) && text.length > prefix.length + suffix.length;\n}\nfunction toggleMarkdownFormat(content, selection, prefix, suffix) {\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n  var isFormatted = isWrappedWith(text, prefix, suffix);\n  if (isFormatted) {\n    return removeMarkdownFormat(content, selection, prefix, suffix);\n  } else {\n    return addMarkdownFormat(content, selection, prefix, suffix);\n  }\n}\nfunction addMarkdownFormat(content, selection, prefix, suffix) {\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n  if (text.includes('\\n')) {\n    var lines = text.split('\\n');\n    var formattedLines = lines.map(function (line) {\n      return prefix + line + suffix;\n    });\n    var newText = formattedLines.join('\\n');\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    };\n  }\n  return {\n    content: content.slice(0, start) + prefix + text + suffix + content.slice(end),\n    newStart: start + prefix.length,\n    newEnd: end + prefix.length + suffix.length\n  };\n}\nfunction removeMarkdownFormat(content, selection, prefix, suffix) {\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n  if (text.includes('\\n')) {\n    var lines = text.split('\\n');\n    var unformattedLines = lines.map(function (line) {\n      var result = line;\n      if (line.startsWith(prefix)) result = result.slice(prefix.length);\n      if (suffix && line.endsWith(suffix)) result = result.slice(0, -suffix.length);\n      return result;\n    });\n    var newText = unformattedLines.join('\\n');\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    };\n  }\n  return {\n    content: content.slice(0, start) + text.slice(prefix.length, -suffix.length) + content.slice(end),\n    newStart: start,\n    newEnd: end - prefix.length - suffix.length\n  };\n}\nfunction handleMultilineFormat(content, selection, prefix) {\n  var suffix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  var start = selection.start,\n    end = selection.end,\n    text = selection.text;\n  var lines = text.split('\\n');\n  var isFormatted = lines.every(function (line) {\n    return line.trim().startsWith(prefix);\n  });\n  if (isFormatted) {\n    var newLines = lines.map(function (line) {\n      return line.slice(prefix.length);\n    });\n    var newText = newLines.join('\\n');\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    };\n  } else {\n    var _newLines = lines.map(function (line) {\n      return prefix + line;\n    });\n    var _newText = _newLines.join('\\n');\n    return {\n      content: content.slice(0, start) + _newText + content.slice(end),\n      newStart: start,\n      newEnd: end + prefix.length * lines.length\n    };\n  }\n}\nfunction handleHeader(content, selection, level) {\n  var prefix = '#'.repeat(level) + ' ';\n  var lines = selection.text.split('\\n');\n  var isFormatted = lines.every(function (line) {\n    return line.trimStart().startsWith(prefix.trimStart());\n  });\n  if (isFormatted) {\n    var newLines = lines.map(function (line) {\n      return line.replace(new RegExp(\"^\\\\s*\".concat(prefix.trimStart())), '');\n    });\n    var newText = newLines.join('\\n');\n    return {\n      content: content.slice(0, selection.start) + newText + content.slice(selection.end),\n      newStart: selection.start,\n      newEnd: selection.start + newText.length\n    };\n  } else {\n    var _newLines2 = lines.map(function (line) {\n      return line ? prefix + line : line;\n    });\n    var _newText2 = _newLines2.join('\\n');\n    return {\n      content: content.slice(0, selection.start) + _newText2 + content.slice(selection.end),\n      newStart: selection.start + prefix.length,\n      newEnd: selection.start + _newText2.length\n    };\n  }\n}\nexport var formatHelpers = {\n  bold: function bold(content, selection) {\n    return toggleMarkdownFormat(content, selection, '**', '**');\n  },\n  italic: function italic(content, selection) {\n    return toggleMarkdownFormat(content, selection, '_', '_');\n  },\n  strikethrough: function strikethrough(content, selection) {\n    return toggleMarkdownFormat(content, selection, '~~', '~~');\n  },\n  h1: function h1(content, selection) {\n    return handleHeader(content, selection, 1);\n  },\n  h2: function h2(content, selection) {\n    return handleHeader(content, selection, 2);\n  },\n  h3: function h3(content, selection) {\n    return handleHeader(content, selection, 3);\n  },\n  ul: function ul(content, selection) {\n    return handleMultilineFormat(content, selection, '- ');\n  },\n  ol: function ol(content, selection) {\n    return handleMultilineFormat(content, selection, '1. ');\n  },\n  taskList: function taskList(content, selection) {\n    return handleMultilineFormat(content, selection, '- [ ] ');\n  },\n  quote: function quote(content, selection) {\n    return handleMultilineFormat(content, selection, '> ');\n  },\n  code: function code(content, selection) {\n    return toggleMarkdownFormat(content, selection, '`', '`');\n  },\n  codeblock: function codeblock(content, selection) {\n    return handleMultilineFormat(content, selection, '```\\n', '\\n```');\n  },\n  table: function table(content, selection) {\n    var tableTemplate = \"\\n| Header 1 | Header 2 |\\n|----------|----------|\\n| Cell 1   | Cell 2   |\\n\";\n    var formattedTable = \"\\n\".concat(tableTemplate.trim(), \"\\n\");\n    return {\n      content: content.slice(0, selection.start) + formattedTable + content.slice(selection.end),\n      newStart: selection.start + formattedTable.length,\n      newEnd: selection.start + formattedTable.length\n    };\n  },\n  image: function image(content, selection, imagePath) {\n    var markdownImage = \"![\\u56FE\\u7247](\".concat(imagePath, \")\");\n    return {\n      content: content.slice(0, selection.start) + markdownImage + content.slice(selection.end),\n      newStart: selection.start + markdownImage.length,\n      newEnd: selection.start + markdownImage.length\n    };\n  },\n  link: function link(content, selection, linkText, url) {\n    if (selection.text.includes('![图片]')) return {\n      content: content,\n      newStart: selection.start\n    };\n    var markdownLink = \"[\".concat(linkText, \"](\").concat(url, \")\");\n    return {\n      content: content.slice(0, selection.start) + markdownLink + content.slice(selection.end),\n      newStart: selection.start + markdownLink.length,\n      newEnd: selection.start + markdownLink.length\n    };\n  }\n};","map":{"version":3,"names":["handleCodeFormat","content","selection","handleMultilineFormat","detectFormats","text","lines","split","isMultiline","length","bold","test","italic","strikethrough","h1","h2","h3","ul","every","line","ol","taskList","code","codeblock","quote","isWrappedWith","prefix","suffix","arguments","undefined","startsWith","endsWith","toggleMarkdownFormat","start","end","isFormatted","removeMarkdownFormat","addMarkdownFormat","includes","formattedLines","map","newText","join","slice","newStart","newEnd","unformattedLines","result","trim","newLines","handleHeader","level","repeat","trimStart","replace","RegExp","concat","formatHelpers","table","tableTemplate","formattedTable","image","imagePath","markdownImage","link","linkText","url","markdownLink"],"sources":["D:/作业/markdown-editor优化版/src/lib/formatUtils.js"],"sourcesContent":["export function handleCodeFormat(content, selection) {\n  return handleMultilineFormat(content, selection, '```', '\\n```')\n}\n\nexport function detectFormats(text) {\n  if (!text || typeof text !== 'string') return {}\n  const lines = text.split('\\n')\n  const isMultiline = lines.length > 1\n  return {\n    bold: /^\\*\\*.+\\*\\*$/.test(text),\n    italic: /^_.+_$/.test(text),\n    strikethrough: /^~~.+~~$/.test(text),\n    h1: /^#\\s.+$/.test(text),\n    h2: /^##\\s.+$/.test(text),\n    h3: /^###\\s.+$/.test(text),\n    ul: lines.every(line => /^\\s*[-*+]\\s.+$/.test(line)),\n    ol: lines.every(line => /^\\s*\\d+\\.\\s.+$/.test(line)),\n    taskList: lines.every(line => /^\\s*[-*+]\\s\\[[ xX]\\]\\s.+$/.test(line)),\n    code: /^`.+`$/.test(text),\n    codeblock: /^```[^\\n]*\\n[\\s\\S]*?\\n```$/.test(text),\n    quote: lines.every(line => /^\\s*>/.test(line))\n  }\n}\n\nfunction isWrappedWith(text, prefix, suffix = prefix) {\n  if (!text || !prefix) return false\n  return (\n    text.startsWith(prefix) && \n    text.endsWith(suffix) &&\n    text.length > prefix.length + suffix.length\n  )\n}\n\nfunction toggleMarkdownFormat(content, selection, prefix, suffix) {\n  const { start, end, text } = selection\n  const isFormatted = isWrappedWith(text, prefix, suffix)\n  if (isFormatted) {\n    return removeMarkdownFormat(content, selection, prefix, suffix)\n  } else {\n    return addMarkdownFormat(content, selection, prefix, suffix)\n  }\n}\n\nfunction addMarkdownFormat(content, selection, prefix, suffix) {\n  const { start, end, text } = selection\n  if (text.includes('\\n')) {\n    const lines = text.split('\\n')\n    const formattedLines = lines.map(line => prefix + line + suffix)\n    const newText = formattedLines.join('\\n')\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    }\n  }\n  return {\n    content: content.slice(0, start) + prefix + text + suffix + content.slice(end),\n    newStart: start + prefix.length,\n    newEnd: end + prefix.length + suffix.length\n  }\n}\n\nfunction removeMarkdownFormat(content, selection, prefix, suffix) {\n  const { start, end, text } = selection\n  if (text.includes('\\n')) {\n    const lines = text.split('\\n')\n    const unformattedLines = lines.map(line => {\n      let result = line\n      if (line.startsWith(prefix)) result = result.slice(prefix.length)\n      if (suffix && line.endsWith(suffix)) result = result.slice(0, -suffix.length)\n      return result\n    })\n    const newText = unformattedLines.join('\\n')\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    }\n  }\n  return {\n    content: content.slice(0, start) + \n             text.slice(prefix.length, -suffix.length) + \n             content.slice(end),\n    newStart: start,\n    newEnd: end - prefix.length - suffix.length\n  }\n}\n\nfunction handleMultilineFormat(content, selection, prefix, suffix = '') {\n  const { start, end, text } = selection\n  const lines = text.split('\\n')\n  const isFormatted = lines.every(line => line.trim().startsWith(prefix))\n  if (isFormatted) {\n    const newLines = lines.map(line => line.slice(prefix.length))\n    const newText = newLines.join('\\n')\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: start + newText.length\n    }\n  } else {\n    const newLines = lines.map(line => prefix + line)\n    const newText = newLines.join('\\n')\n    return {\n      content: content.slice(0, start) + newText + content.slice(end),\n      newStart: start,\n      newEnd: end + (prefix.length * lines.length)\n    }\n  }\n}\n\nfunction handleHeader(content, selection, level) {\n  const prefix = '#'.repeat(level) + ' '\n  const lines = selection.text.split('\\n')\n  const isFormatted = lines.every(line => line.trimStart().startsWith(prefix.trimStart()))\n  \n  if (isFormatted) {\n    const newLines = lines.map(line => line.replace(new RegExp(`^\\\\s*${prefix.trimStart()}`), ''))\n    const newText = newLines.join('\\n')\n    return {\n      content: content.slice(0, selection.start) + newText + content.slice(selection.end),\n      newStart: selection.start,\n      newEnd: selection.start + newText.length\n    }\n  } else {\n    const newLines = lines.map(line => (line ? prefix + line : line))\n    const newText = newLines.join('\\n')\n    return {\n      content: content.slice(0, selection.start) + newText + content.slice(selection.end),\n      newStart: selection.start + prefix.length,\n      newEnd: selection.start + newText.length\n    }\n  }\n}\n\nexport const formatHelpers = {\n  bold: (content, selection) => toggleMarkdownFormat(content, selection, '**', '**'),\n  italic: (content, selection) => toggleMarkdownFormat(content, selection, '_', '_'),\n  strikethrough: (content, selection) => toggleMarkdownFormat(content, selection, '~~', '~~'),\n  h1: (content, selection) => handleHeader(content, selection, 1),\n  h2: (content, selection) => handleHeader(content, selection, 2),\n  h3: (content, selection) => handleHeader(content, selection, 3),\n  ul: (content, selection) => handleMultilineFormat(content, selection, '- '),\n  ol: (content, selection) => handleMultilineFormat(content, selection, '1. '),\n  taskList: (content, selection) => handleMultilineFormat(content, selection, '- [ ] '),\n  quote: (content, selection) => handleMultilineFormat(content, selection, '> '),\n  code: (content, selection) => toggleMarkdownFormat(content, selection, '`', '`'),\n  codeblock: (content, selection) => handleMultilineFormat(content, selection, '```\\n', '\\n```'),\n  table: (content, selection) => {\n    const tableTemplate = `\n| Header 1 | Header 2 |\n|----------|----------|\n| Cell 1   | Cell 2   |\n`\n    const formattedTable = `\\n${tableTemplate.trim()}\\n`\n    return {\n      content: content.slice(0, selection.start) + formattedTable + content.slice(selection.end),\n      newStart: selection.start + formattedTable.length,\n      newEnd: selection.start + formattedTable.length\n    }\n  },\n  image: (content, selection, imagePath) => {\n    const markdownImage = `![图片](${imagePath})`\n    return {\n      content: content.slice(0, selection.start) + markdownImage + content.slice(selection.end),\n      newStart: selection.start + markdownImage.length,\n      newEnd: selection.start + markdownImage.length\n    }\n  },\n  link: (content, selection, linkText, url) => {\n    if (selection.text.includes('![图片]')) return { content, newStart: selection.start }\n    const markdownLink = `[${linkText}](${url})`\n    return {\n      content: content.slice(0, selection.start) + markdownLink + content.slice(selection.end),\n      newStart: selection.start + markdownLink.length,\n      newEnd: selection.start + markdownLink.length\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}